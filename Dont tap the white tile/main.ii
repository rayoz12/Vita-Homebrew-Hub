# 1 "src/main.c"
# 1 "/home/ryan/Desktop/Vita_Homebrew/My_Coding/Vita_Tap_Game//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "src/main.c"



# 1 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/processmgr.h" 1 3
# 15 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/processmgr.h" 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 1 3
# 15 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/types.h" 1 3
# 15 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/types.h" 3
# 1 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 1 3 4
# 147 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 212 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 3 4
typedef unsigned int size_t;
# 16 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/types.h" 2 3
# 1 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stdint.h" 1 3 4
# 9 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stdint.h" 3 4
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 1 3 4
# 12 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 3 4
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 1 3 4







# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/features.h" 1 3 4
# 25 "/usr/local/vitasdk/arm-vita-eabi/include/sys/features.h" 3 4
extern "C" {
# 233 "/usr/local/vitasdk/arm-vita-eabi/include/sys/features.h" 3 4
}
# 9 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 2 3 4
# 23 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 3 4
extern "C" {



typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 41 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 3 4
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 63 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 3 4
typedef long int __int32_t;

typedef long unsigned int __uint32_t;
# 89 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 120 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 146 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 168 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 3 4
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;
# 186 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 200 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 3 4
typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 217 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_default_types.h" 3 4
}
# 13 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 2 3 4
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_intsup.h" 1 3 4
# 49 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
# 193 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
# 14 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 2 3 4
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_stdint.h" 1 3 4
# 15 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_stdint.h" 3 4
extern "C" {



typedef __int8_t int8_t ;
typedef __uint8_t uint8_t ;




typedef __int16_t int16_t ;
typedef __uint16_t uint16_t ;




typedef __int32_t int32_t ;
typedef __uint32_t uint32_t ;




typedef __int64_t int64_t ;
typedef __uint64_t uint64_t ;



typedef __intptr_t intptr_t;
typedef __uintptr_t uintptr_t;


}
# 15 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 2 3 4


extern "C" {



typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;




typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;




typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;




typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
# 51 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
# 61 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 3 4
  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
# 71 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 3 4
  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
# 81 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 3 4
  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
# 130 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 3 4
  typedef long long int intmax_t;
# 139 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 3 4
  typedef long long unsigned int uintmax_t;
# 482 "/usr/local/vitasdk/arm-vita-eabi/include/stdint.h" 3 4
}
# 10 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stdint.h" 2 3 4
# 17 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/types.h" 2 3


typedef int8_t SceChar8;
typedef uint8_t SceUChar8;

typedef int8_t SceInt8;
typedef uint8_t SceUInt8;

typedef int16_t SceShort16;
typedef uint16_t SceUShort16;

typedef int16_t SceInt16;
typedef uint16_t SceUInt16;

typedef int32_t SceInt32;
typedef uint32_t SceUInt32;

typedef int32_t SceInt;
typedef uint32_t SceUInt;

typedef int64_t SceInt64;
typedef uint64_t SceUInt64;

typedef int64_t SceLong64;
typedef uint64_t SceULong64;

typedef unsigned int SceSize;
typedef int SceSSize;

typedef int SceBool;

enum {
 SCE_FALSE,
 SCE_TRUE
};

typedef float SceFloat;
typedef float SceFloat32;

typedef double SceDouble;
typedef double SceDouble64;

typedef signed char SceSByte;
typedef signed char SceSByte8;

typedef unsigned char SceByte;
typedef unsigned char SceByte8;

typedef uint16_t SceWChar16;
typedef uint32_t SceWChar32;

typedef void SceVoid;
typedef void *ScePVoid;

typedef int SceIntPtr;
typedef unsigned int SceUIntPtr;
typedef SceUIntPtr SceUIntVAddr;


typedef struct SceIVector2 {
    SceInt x;
    SceInt y;
} SceIVector2;

typedef struct SceFVector2 {
    SceFloat x;
    SceFloat y;
} SceFVector2;

typedef struct SceIVector3 {
    SceInt x;
    SceInt y;
    SceInt z;
} SceIVector3;

typedef struct SceFVector3 {
    SceFloat x;
    SceFloat y;
    SceFloat z;
} SceFVector3;

typedef struct SceIVector4 {
    SceInt x;
    SceInt y;
    SceInt z;
    SceInt w;
} SceIVector4;

typedef struct SceUVector4 {
    SceUInt x;
    SceUInt y;
    SceUInt z;
    SceUInt w;
} SceUVector4;

typedef struct SceFVector4 {
    SceFloat x;
    SceFloat y;
    SceFloat z;
    SceFloat w;
} SceFVector4;

typedef struct SceIMatrix2 {
    SceIVector2 x;
    SceIVector2 y;
} SceIMatrix2;

typedef struct SceFMatrix2 {
    SceFVector2 x;
    SceFVector2 y;
} SceFMatrix2;

typedef struct SceIMatrix3 {
    SceIVector3 x;
    SceIVector3 y;
    SceIVector3 z;
} SceIMatrix3;

typedef struct SceFMatrix3 {
    SceFVector3 x;
    SceFVector3 y;
    SceFVector3 z;
} SceFMatrix3;

typedef struct SceIMatrix4 {
    SceIVector4 x;
    SceIVector4 y;
    SceIVector4 z;
    SceIVector4 w;
} SceIMatrix4;

typedef struct SceUMatrix4 {
    SceUVector4 x;
    SceUVector4 y;
    SceUVector4 z;
    SceUVector4 w;
} SceUMatrix4;

typedef struct SceFMatrix4 {
    SceFVector4 x;
    SceFVector4 y;
    SceFVector4 z;
    SceFVector4 w;
} SceFMatrix4;

typedef struct SceFQuaternion {
    SceFloat x;
    SceFloat y;
    SceFloat z;
    SceFloat w;
} SceFQuaternion;

typedef struct SceFColor {
    SceFloat r;
    SceFloat g;
    SceFloat b;
    SceFloat a;
} SceFColor;

typedef struct SceFPlane {
    SceFloat a;
    SceFloat b;
    SceFloat c;
    SceFloat d;
} SceFPlane;

typedef union SceUnion32 {
    unsigned int ui;
    int i;
    unsigned short us[2];
    short s[2];
    unsigned char uc[4];
    char c[4];
    float f;
    void *p;
} SceUnion32;

typedef union SceUnion64 {
    SceULong64 ull;
    SceLong64 ll;
    unsigned int ui[2];
    int i[2];
    unsigned short us[4];
    short s[4];
    unsigned char uc[8];
    char c[8];
    float f[2];
    SceFVector2 fv;
    SceIVector2 iv;
} SceUnion64;

typedef union SceUnion128 {
    SceULong64 ull[2];
    SceLong64 ll[2];
    unsigned int ui[4];
    int i[4];
    unsigned short us[8];
    short s[8];
    unsigned char uc[16];
    char c[16];
    float f[4];
    SceFVector4 fv;
    SceFQuaternion fq;
    SceFPlane fp;
    SceFColor fc;
    SceIVector4 iv;
} SceUnion128;

typedef struct SceDateTime {
    unsigned short year;
    unsigned short month;
    unsigned short day;
    unsigned short hour;
    unsigned short minute;
    unsigned short second;
    unsigned int microsecond;
} SceDateTime;

typedef int SceMode;
typedef SceInt64 SceOff;

typedef int SceUID;

typedef int ScePID;


typedef char* SceName;
# 16 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 2 3


extern "C" {



typedef SceUInt64 SceKernelSysClock;



typedef int (*SceKernelThreadEntry)(SceSize args, void *argp);


typedef struct SceKernelThreadOptParam {

 SceSize size;

 SceUInt32 attr;
} SceKernelThreadOptParam;




typedef struct SceKernelThreadInfo {

 SceSize size;

 SceUID processId;

 char name[32];

 SceUInt attr;

 int status;

 SceKernelThreadEntry entry;

 void *stack;

 int stackSize;

 int initPriority;

 int currentPriority;

 int initCpuAffinityMask;

 int currentCpuAffinityMask;

 int currentCpuId;

 int lastExecutedCpuId;

 int waitType;

 SceUID waitId;

 int exitStatus;

 SceKernelSysClock runClocks;

 SceUInt intrPreemptCount;

 SceUInt threadPreemptCount;

 SceUInt threadReleaseCount;

 SceUID fNotifyCallback;

 int reserved;
} SceKernelThreadInfo;




typedef struct SceKernelThreadRunStatus {
 SceSize size;
 struct {
  SceUID processId;
  SceUID threadId;
  int priority;
 } cpuInfo[4];
} SceKernelThreadRunStatus;


typedef enum SceThreadStatus
{
 SCE_THREAD_RUNNING = 1,
 SCE_THREAD_READY = 2,
 SCE_THREAD_WAITING = 4,
 SCE_THREAD_SUSPEND = 8,
 SCE_THREAD_STOPPED = 16,
 SCE_THREAD_KILLED = 32,
} SceThreadStatus;
# 130 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
SceUID sceKernelCreateThread(const char *name, SceKernelThreadEntry entry, int initPriority,
                             int stackSize, SceUInt attr, int cpuAffinityMask,
                             const SceKernelThreadOptParam *option);
# 141 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelDeleteThread(SceUID thid);
# 150 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelStartThread(SceUID thid, SceSize arglen, void *argp);






int sceKernelExitThread(int status);






int sceKernelExitDeleteThread(int status);
# 175 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelWaitThreadEnd(SceUID thid, int *stat, SceUInt *timeout);
# 186 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelWaitThreadEndCB(SceUID thid, int *stat, SceUInt *timeout);
# 198 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelDelayThread(SceUInt delay);
# 210 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelDelayThreadCB(SceUInt delay);
# 220 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelChangeCurrentThreadAttr(int unknown, SceUInt attr);
# 237 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelChangeThreadPriority(SceUID thid, int priority);
# 246 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelReleaseWaitThread(SceUID thid);






int sceKernelGetThreadId(void);






int sceKernelGetThreadCurrentPriority(void);
# 269 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelGetThreadExitStatus(SceUID thid);






int sceKernelCheckThreadStack(void);
# 286 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelGetThreadStackFreeSize(SceUID thid);
# 305 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelGetThreadInfo(SceUID thid, SceKernelThreadInfo *info);
# 315 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelGetThreadRunStatus(SceUID thid, SceKernelThreadRunStatus *status);





typedef struct SceKernelSemaOptParam {

 SceSize size;
} SceKernelSemaOptParam;




typedef struct SceKernelSemaInfo {

 SceSize size;

 SceUID semaId;

 char name[32];

 SceUInt attr;

 int initCount;

 int currentCount;

 int maxCount;

 int numWaitThreads;
} SceKernelSemaInfo;
# 364 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
SceUID sceKernelCreateSema(const char *name, SceUInt attr, int initVal, int maxVal, SceKernelSemaOptParam *option);







int sceKernelDeleteSema(SceUID semaid);
# 388 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelSignalSema(SceUID semaid, int signal);
# 404 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelWaitSema(SceUID semaid, int signal, SceUInt *timeout);
# 420 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelWaitSemaCB(SceUID semaid, int signal, SceUInt *timeout);
# 430 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelPollSema(SceUID semaid, int signal);
# 440 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelCancelSema(SceUID semaid, int setCount, int *numWaitThreads);
# 450 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelGetSemaInfo(SceUID semaid, SceKernelSemaInfo *info);





typedef struct SceKernelMutexOptParam {

 SceSize size;
 int ceilingPriority;
} SceKernelMutexOptParam;




typedef struct SceKernelMutexInfo {

 SceSize size;

 SceUID mutexId;

 char name[32];

 SceUInt attr;

 int initCount;

 int currentCount;

 SceUID currentOwnerId;

 int numWaitThreads;
} SceKernelMutexInfo;
# 499 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
SceUID sceKernelCreateMutex(const char *name, SceUInt attr, int initCount, SceKernelMutexOptParam *option);







int sceKernelDeleteMutex(SceUID mutexid);







int sceKernelOpenMutex(const char *name);







int sceKernelCloseMutex(SceUID mutexid);
# 533 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelLockMutex(SceUID mutexid, int lockCount, unsigned int *timeout);
# 543 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelLockMutexCB(SceUID mutexid, int lockCount, unsigned int *timeout);
# 552 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelTryLockMutex(SceUID mutexid, int lockCount);
# 561 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelUnlockMutex(SceUID mutexid, int unlockCount);
# 571 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelCancelMutex(SceUID mutexid, int newCount, int *numWaitThreads);
# 581 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelGetMutexInfo(SceUID mutexid, SceKernelMutexInfo info);





typedef struct SceKernelEventFlagInfo {
 SceSize size;
 SceUID evfId;
 char name[32];
 SceUInt attr;
 SceUInt initPattern;
 SceUInt currentPattern;
 int numWaitThreads;
} SceKernelEventFlagInfo;

typedef struct SceKernelEventFlagOptParam {
 SceSize size;
} SceKernelEventFlagOptParam;

typedef struct SceKernelEventFlagOptParam SceKernelEventFlagOptParam;


typedef enum SceEventFlagAttributes {

 SCE_EVENT_WAITMULTIPLE = 0x200
} SceEventFlagAttributes;


typedef enum SceEventFlagWaitTypes {

 SCE_EVENT_WAITAND = 0,

 SCE_EVENT_WAITOR = 1,

 SCE_EVENT_WAITCLEAR = 2,

 SCE_EVENT_WAITCLEAR_PAT = 4
} SceEventFlagWaitTypes;
# 636 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
SceUID sceKernelCreateEventFlag(const char *name, int attr, int bits, SceKernelEventFlagOptParam *opt);
# 646 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelSetEventFlag(SceUID evid, unsigned int bits);
# 656 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelClearEventFlag(SceUID evid, unsigned int bits);
# 667 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelPollEventFlag(int evid, unsigned int bits, unsigned int wait, unsigned int *outBits);
# 679 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelWaitEventFlag(int evid, unsigned int bits, unsigned int wait, unsigned int *outBits, SceUInt *timeout);
# 691 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelWaitEventFlagCB(int evid, unsigned int bits, unsigned int wait, unsigned int *outBits, SceUInt *timeout);
# 700 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelDeleteEventFlag(int evid);
# 710 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelGetEventFlagInfo(SceUID event, SceKernelEventFlagInfo *info);





typedef int (*SceKernelCallbackFunction)(int notifyId, int notifyCount, int notifyArg, void *common);


typedef struct SceKernelCallbackInfo {

 SceSize size;

 SceUID callbackId;

 char name[32];

 SceUID threadId;

 SceKernelCallbackFunction callback;

 void *common;

 int notifyCount;

 int notifyArg;
} SceKernelCallbackInfo;
# 753 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelCreateCallback(const char *name, unsigned int attr, SceKernelCallbackFunction func, void *arg);
# 764 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelGetCallbackInfo(SceUID cb, SceKernelCallbackInfo *infop);
# 773 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelDeleteCallback(SceUID cb);
# 783 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelNotifyCallback(SceUID cb, int arg2);
# 792 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelCancelCallback(SceUID cb);
# 801 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelGetCallbackCount(SceUID cb);






int sceKernelCheckCallback(void);
# 824 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
SceUID sceKernelCreateMsgPipe(const char *name, int part, int attr, void *unk1, void *opt);
# 833 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelDeleteMsgPipe(SceUID uid);
# 847 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelSendMsgPipe(SceUID uid, void *message, unsigned int size, int unk1, void *unk2, unsigned int *timeout);
# 861 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelSendMsgPipeCB(SceUID uid, void *message, unsigned int size, int unk1, void *unk2, unsigned int *timeout);
# 874 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelTrySendMsgPipe(SceUID uid, void *message, unsigned int size, int unk1, void *unk2);
# 888 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelReceiveMsgPipe(SceUID uid, void *message, unsigned int size, int unk1, void *unk2, unsigned int *timeout);
# 902 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelReceiveMsgPipeCB(SceUID uid, void *message, unsigned int size, int unk1, void *unk2, unsigned int *timeout);
# 915 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelTryReceiveMsgPipe(SceUID uid, void *message, unsigned int size, int unk1, void *unk2);
# 926 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelCancelMsgPipe(SceUID uid, int *psend, int *precv);


typedef struct SceKernelMppInfo {
 SceSize size;
 SceUID mppId;
 char name[32];
 SceUInt attr;
 int bufSize;
 int freeSize;
 int numSendWaitThreads;
 int numReceiveWaitThreads;
} SceKernelMppInfo;
# 948 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelGetMsgPipeInfo(SceUID uid, SceKernelMppInfo *info);




typedef struct SceKernelSystemInfo {
 SceSize size;
 SceUInt32 activeCpuMask;

 struct {
  SceKernelSysClock idleClock;
  SceUInt32 comesOutOfIdleCount;
  SceUInt32 threadSwitchCount;
 } cpuInfo[4];
} SceKernelSystemInfo;
# 971 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
int sceKernelGetSystemInfo(SceKernelSystemInfo *info);




typedef enum SceKernelIdListType {
 SCE_KERNEL_TMID_Thread = 1,
 SCE_KERNEL_TMID_Semaphore = 2,
 SCE_KERNEL_TMID_EventFlag = 3,
 SCE_KERNEL_TMID_Mbox = 4,
 SCE_KERNEL_TMID_Vpl = 5,
 SCE_KERNEL_TMID_Fpl = 6,
 SCE_KERNEL_TMID_Mpipe = 7,
 SCE_KERNEL_TMID_Callback = 8,
 SCE_KERNEL_TMID_ThreadEventHandler = 9,
 SCE_KERNEL_TMID_Alarm = 10,
 SCE_KERNEL_TMID_VTimer = 11,
 SCE_KERNEL_TMID_SleepThread = 64,
 SCE_KERNEL_TMID_DelayThread = 65,
 SCE_KERNEL_TMID_SuspendThread = 66,
 SCE_KERNEL_TMID_DormantThread = 67,
} SceKernelIdListType;
# 1001 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
SceKernelIdListType sceKernelGetThreadmgrUIDClass(SceUID uid);



typedef struct SceKernelLwMutexWork {
 SceInt64 data[4];
} SceKernelLwMutexWork;

typedef struct SceKernelLwMutexOptParam {
 SceSize size;
} SceKernelLwMutexOptParam;

int sceKernelCreateLwMutex(SceKernelLwMutexWork *pWork,const char *pName, unsigned int attr, int initCount, const SceKernelLwMutexOptParam *pOptParam);
int sceKernelDeleteLwMutex(SceKernelLwMutexWork *pWork);
int sceKernelLockLwMutex(SceKernelLwMutexWork *pWork, int lockCount, unsigned int *pTimeout);
int sceKernelUnlockLwMutex(SceKernelLwMutexWork *pWork, int unlockCount);

typedef struct SceKernelLwCondWork {
 SceInt64 data[4];
} SceKernelLwCondWork;

typedef struct SceKernelLwCondOptParam {
 SceSize size;
} SceKernelLwCondOptParam;

int sceKernelCreateLwCond(SceKernelLwCondWork *pWork, const char *pName, unsigned int attr, SceKernelLwMutexWork *pLwMutex, const SceKernelLwCondOptParam *pOptParam);
int sceKernelDeleteLwCond(SceKernelLwCondWork *pWork);
int sceKernelSignalLwCond(SceKernelLwCondWork *pWork);
int sceKernelWaitLwCond(SceKernelLwCondWork *pWork, unsigned int *pTimeout);
# 1038 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/threadmgr.h" 3
SceInt64 sceKernelGetSystemTimeWide(void);







void *sceKernelGetThreadTLSAddr(SceUID thid, int key);






void *sceKernelGetTLSAddr(int key);


}
# 16 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/processmgr.h" 2 3



extern "C" {


enum {
 SCE_KERNEL_PROCESS_PRIORITY_SYSTEM_HIGH = 32,
 SCE_KERNEL_PROCESS_PRIORITY_SYSTEM_DEFAULT = 96,
 SCE_KERNEL_PROCESS_PRIORITY_SYSTEM_LOW = 159
};

enum {
 SCE_KERNEL_PROCESS_PRIORITY_USER_HIGH = 64,
 SCE_KERNEL_PROCESS_PRIORITY_USER_DEFAULT = 96,
 SCE_KERNEL_PROCESS_PRIORITY_USER_LOW = 127
};

enum {

 SCE_KERNEL_POWER_TICK_DEFAULT = 0,

 SCE_KERNEL_POWER_TICK_DISABLE_AUTO_SUSPEND = 1,

 SCE_KERNEL_POWER_TICK_DISABLE_OLED_OFF = 4,

 SCE_KERNEL_POWER_TICK_DISABLE_OLED_DIMMING = 6
};
# 53 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/processmgr.h" 3
int sceKernelExitProcess(int res);
# 62 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/processmgr.h" 3
int sceKernelPowerTick(int type);
# 71 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/processmgr.h" 3
int sceKernelGetProcessTime(SceKernelSysClock *pSysClock);






SceUInt32 sceKernelGetProcessTimeLow(void);






SceUInt64 sceKernelGetProcessTimeWide(void);






SceUID sceKernelGetProcessId(void);


}
# 5 "src/main.c" 2
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/touch.h" 1 3
# 16 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/touch.h" 3
extern "C" {





enum {
 SCE_TOUCH_MAX_REPORT = 8
};







enum {
 SCE_TOUCH_PORT_FRONT = 0,
 SCE_TOUCH_PORT_BACK = 1,
 SCE_TOUCH_PORT_MAX_NUM = 2
};






enum {
 SCE_TOUCH_SAMPLING_STATE_STOP = 0,
 SCE_TOUCH_SAMPLING_STATE_START = 1
};






enum {
 SCE_TOUCH_REPORT_INFO_HIDE_UPPER_LAYER = 0x0001
};


enum {
 SCE_TOUCH_ERROR_INVALID_ARG = 0x80350001,
 SCE_TOUCH_ERROR_PRIV_REQUIRED = 0x80350002,
 SCE_TOUCH_ERROR_FATAL = 0x803500ff
};

typedef struct SceTouchPanelInfo {
 SceInt16 minAaX;
 SceInt16 minAaY;
 SceInt16 maxAaX;
 SceInt16 maxAaY;
 SceInt16 minDispX;
 SceInt16 minDispY;
 SceInt16 maxDispX;
 SceInt16 maxDispY;
 SceUInt8 minForce;
 SceUInt8 maxForce;
 SceUInt8 reserved[30];
} SceTouchPanelInfo;

typedef struct SceTouchReport {
 SceUInt8 id;
 SceUInt8 force;
 SceInt16 x;
 SceInt16 y;
 SceUInt8 reserved[8];
 SceUInt16 info;
} SceTouchReport;

typedef struct SceTouchData {
 SceUInt64 timeStamp;
 SceUInt32 status;
 SceUInt32 reportNum;
 SceTouchReport report[SCE_TOUCH_MAX_REPORT];
} SceTouchData;







int sceTouchGetPanelInfo(SceUInt32 port, SceTouchPanelInfo *pPanelInfo);
# 109 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/touch.h" 3
int sceTouchRead(SceUInt32 port, SceTouchData *pData, SceUInt32 nBufs);
# 118 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/touch.h" 3
int sceTouchPeek(SceUInt32 port, SceTouchData *pData, SceUInt32 nBufs);







int sceTouchSetSamplingState(SceUInt32 port, SceUInt32 state);







int sceTouchGetSamplingState(SceUInt32 port, SceUInt32 *pState);






int sceTouchEnableTouchForce(SceUInt32 port);






int sceTouchDisableTouchForce(SceUInt32 port);


}
# 6 "src/main.c" 2
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 1 3
# 19 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 3
extern "C" {


enum {
 SCE_CTRL_ERROR_INVALID_ARG = 0x80340001,
 SCE_CTRL_ERROR_PRIV_REQUIRED = 0x80340002,
 SCE_CTRL_ERROR_FATAL = 0x803400FF
};


enum {
 SCE_CTRL_SELECT = 0x000001,
 SCE_CTRL_START = 0x000008,
 SCE_CTRL_UP = 0x000010,
 SCE_CTRL_RIGHT = 0x000020,
 SCE_CTRL_DOWN = 0x000040,
 SCE_CTRL_LEFT = 0x000080,
 SCE_CTRL_LTRIGGER = 0x000100,
 SCE_CTRL_RTRIGGER = 0x000200,
 SCE_CTRL_TRIANGLE = 0x001000,
 SCE_CTRL_CIRCLE = 0x002000,
 SCE_CTRL_CROSS = 0x004000,
 SCE_CTRL_SQUARE = 0x008000,
 SCE_CTRL_ANY = 0x010000
};


enum {

 SCE_CTRL_MODE_DIGITAL = 0,

 SCE_CTRL_MODE_ANALOG = 1,

 SCE_CTRL_MODE_ANALOG_WIDE = 2
};


typedef struct SceCtrlData {

 uint64_t timeStamp;

 unsigned int buttons;

 unsigned char lx;

 unsigned char ly;

 unsigned char rx;

 unsigned char ry;

 uint8_t reserved[16];
} SceCtrlData;


typedef struct SceCtrlRapidFireRule {
 unsigned int Mask;
 unsigned int Trigger;
 unsigned int Target;
 unsigned int Delay;
 unsigned int Make;
 unsigned int Break;
} SceCtrlRapidFireRule;


typedef struct SceCtrlActuator {
 int enable;
 int unk;
} SceCtrlActuator;
# 96 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 3
int sceCtrlSetSamplingMode(int mode);
# 105 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 3
int sceCtrlGetSamplingMode(int *pMode);
# 116 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 3
int sceCtrlPeekBufferPositive(int port, SceCtrlData *pad_data, int count);
# 127 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 3
int sceCtrlPeekBufferNegative(int port, SceCtrlData *pad_data, int count);
# 138 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 3
int sceCtrlReadBufferPositive(int port, SceCtrlData *pad_data, int count);
# 149 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 3
int sceCtrlReadBufferNegative(int port, SceCtrlData *pad_data, int count);
# 160 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 3
int sceCtrlSetRapidFire(int port, int idx, const SceCtrlRapidFireRule* pRule);
# 170 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 3
int sceCtrlClearRapidFire(int port, int idx);
# 180 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 3
int sceCtrlSetActuator(int port, const SceCtrlActuator* pState);
# 192 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/ctrl.h" 3
int sceCtrlSetLightBar(int port, SceUInt8 r, SceUInt8 g, SceUInt8 b);


}
# 7 "src/main.c" 2

# 1 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 1 3
# 29 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/_ansi.h" 1 3
# 15 "/usr/local/vitasdk/arm-vita-eabi/include/_ansi.h" 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/newlib.h" 1 3
# 16 "/usr/local/vitasdk/arm-vita-eabi/include/_ansi.h" 2 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/config.h" 1 3



# 1 "/usr/local/vitasdk/arm-vita-eabi/include/machine/ieeefp.h" 1 3
# 5 "/usr/local/vitasdk/arm-vita-eabi/include/sys/config.h" 2 3
# 17 "/usr/local/vitasdk/arm-vita-eabi/include/_ansi.h" 2 3
# 30 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 2 3





# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/cdefs.h" 1 3
# 45 "/usr/local/vitasdk/arm-vita-eabi/include/sys/cdefs.h" 3
# 1 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 1 3 4
# 46 "/usr/local/vitasdk/arm-vita-eabi/include/sys/cdefs.h" 2 3
# 36 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 2 3
# 1 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 1 3 4
# 37 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 2 3


# 1 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stdarg.h" 1 3 4
# 40 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 40 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 2 3







# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 1 3
# 9 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 3
extern "C" {



# 1 "/usr/local/vitasdk/arm-vita-eabi/include/_ansi.h" 1 3
# 14 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 2 3
# 1 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 1 3 4
# 15 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 2 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_types.h" 1 3
# 12 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_types.h" 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/machine/_types.h" 1 3
# 13 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_types.h" 2 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/lock.h" 1 3





typedef int _LOCK_T;
typedef int _LOCK_RECURSIVE_T;
# 14 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_types.h" 2 3


typedef long _off_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



__extension__ typedef long long _off64_t;







typedef long _fpos_t;
# 55 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_types.h" 3
typedef signed int _ssize_t;
# 67 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_types.h" 3
# 1 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 1 3 4
# 353 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 68 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_RECURSIVE_T _flock_t;




typedef void *_iconv_t;
# 16 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 2 3






typedef unsigned long __ULong;
# 38 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 3
struct _reent;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 91 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 115 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 179 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 285 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 317 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 569 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];

  int _current_category;
  const char *_current_locale;

  int __sdidinit;

  void (* __cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;
  __FILE __sf[3];
};
# 762 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 3
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 788 "/usr/local/vitasdk/arm-vita-eabi/include/sys/reent.h" 3
}
# 48 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 2 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/types.h" 1 3
# 71 "/usr/local/vitasdk/arm-vita-eabi/include/sys/types.h" 3
# 1 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 1 3 4
# 72 "/usr/local/vitasdk/arm-vita-eabi/include/sys/types.h" 2 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/machine/types.h" 1 3
# 19 "/usr/local/vitasdk/arm-vita-eabi/include/machine/types.h" 3
typedef long int __off_t;
typedef int __pid_t;

__extension__ typedef long long int __loff_t;





typedef long __suseconds_t;
# 73 "/usr/local/vitasdk/arm-vita-eabi/include/sys/types.h" 2 3
# 95 "/usr/local/vitasdk/arm-vita-eabi/include/sys/types.h" 3
typedef unsigned char u_char;



typedef unsigned short u_short;



typedef unsigned int u_int;



typedef unsigned long u_long;





typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



typedef unsigned long clock_t;




typedef long time_t;




typedef long daddr_t;



typedef char * caddr_t;
# 142 "/usr/local/vitasdk/arm-vita-eabi/include/sys/types.h" 3
typedef unsigned short ino_t;
# 171 "/usr/local/vitasdk/arm-vita-eabi/include/sys/types.h" 3
typedef _off_t off_t;
typedef __dev_t dev_t;
typedef __uid_t uid_t;
typedef __gid_t gid_t;





typedef int pid_t;







typedef long key_t;

typedef _ssize_t ssize_t;
# 204 "/usr/local/vitasdk/arm-vita-eabi/include/sys/types.h" 3
typedef unsigned int mode_t __attribute__ ((__mode__ (__SI__)));




typedef unsigned short nlink_t;
# 231 "/usr/local/vitasdk/arm-vita-eabi/include/sys/types.h" 3
typedef long fd_mask;







typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;
# 262 "/usr/local/vitasdk/arm-vita-eabi/include/sys/types.h" 3
typedef unsigned long clockid_t;




typedef unsigned long timer_t;



typedef unsigned long useconds_t;


typedef __suseconds_t suseconds_t;



typedef __int64_t sbintime_t;
# 49 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 2 3

extern "C" {


typedef __FILE FILE;






typedef _fpos_t fpos_t;





# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/stdio.h" 1 3
# 67 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 2 3
# 167 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 3
FILE * tmpfile (void);
char * tmpnam (char *);

char * tempnam (const char *, const char *);

int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *, const char *, FILE *);
void setbuf (FILE *, char *);
int setvbuf (FILE *, char *, int, size_t);
int fprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int printf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int scanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int sscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int vfprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int vsprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int fgetc (FILE *);
char * fgets (char *, int, FILE *);
int fputc (int, FILE *);
int fputs (const char *, FILE *);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void * , size_t _size, size_t _n, FILE *);
size_t fwrite (const void * , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *, fpos_t *);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char * _name, const char * _type);
int sprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int remove (const char *);
int rename (const char *, const char *);
# 238 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 3
int fseeko (FILE *, off_t, int);
off_t ftello ( FILE *);







int asiprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
char * asniprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * asnprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int asprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int diprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int fiprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fiscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int iprintf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int iscanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int siprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int siscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int snprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int sniprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vasiprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vasprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vdiprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vfscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int viprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int viscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsiprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vsiscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vsniprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vsnprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vsscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
# 316 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 3
FILE * fdopen (int, const char *);

int fileno (FILE *);
int getw (FILE *);
int pclose (FILE *);
FILE * popen (const char *, const char *);
int putw (int, FILE *);
void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);
int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);
# 341 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 3
int dprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

FILE * fmemopen (void *, size_t, const char *);


FILE * open_memstream (char **, size_t *);

int renameat (int, const char *, int, const char *);

int vdprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;







int _asiprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
char * _asnprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _asprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _diprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _dprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *, int, FILE *);
char * _fgets_unlocked_r (struct _reent *, char *, int, FILE *);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fiscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
FILE * _fmemopen_r (struct _reent *, void *, size_t, const char *);
FILE * _fopen_r (struct _reent *, const char *, const char *);
FILE * _freopen_r (struct _reent *, const char *, const char *, FILE *);
int _fprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *, FILE *);
int _fputs_unlocked_r (struct _reent *, const char *, FILE *);
size_t _fread_r (struct _reent *, void * , size_t _size, size_t _n, FILE *);
size_t _fread_unlocked_r (struct _reent *, void * , size_t _size, size_t _n, FILE *);
int _fscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void * , size_t _size, size_t _n, FILE *);
size_t _fwrite_unlocked_r (struct _reent *, const void * , size_t _size, size_t _n, FILE *);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _iscanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *, const char *_old, const char *_new)
                                          ;
int _scanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int _siprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _siscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _snprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _sprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _sscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vfprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _vscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsnprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;



int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);


void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void * , size_t _size, size_t _n, FILE *);
size_t fwrite_unlocked (const void * , size_t _size, size_t _n, FILE *);
# 541 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 3
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
# 565 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 3
FILE *funopen (const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
FILE *_funopen_r (struct _reent *, const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;







typedef ssize_t cookie_read_function_t(void *__cookie, char *__buf, size_t __n);
typedef ssize_t cookie_write_function_t(void *__cookie, const char *__buf,
     size_t __n);




typedef int cookie_seek_function_t(void *__cookie, off_t *__off, int __whence);

typedef int cookie_close_function_t(void *__cookie);
typedef struct
{


  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
FILE *fopencookie (void *__cookie, const char *__mode, cookie_io_functions_t __functions)
                                                         ;
FILE *_fopencookie_r (struct _reent *, void *__cookie, const char *__mode, cookie_io_functions_t __functions)
                                                         ;
# 728 "/usr/local/vitasdk/arm-vita-eabi/include/stdio.h" 3
}
# 9 "src/main.c" 2
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/stdlib.h" 1 3
# 10 "/usr/local/vitasdk/arm-vita-eabi/include/stdlib.h" 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/machine/ieeefp.h" 1 3
# 11 "/usr/local/vitasdk/arm-vita-eabi/include/stdlib.h" 2 3





# 1 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 1 3 4
# 17 "/usr/local/vitasdk/arm-vita-eabi/include/stdlib.h" 2 3



# 1 "/usr/local/vitasdk/arm-vita-eabi/include/machine/stdlib.h" 1 3
# 21 "/usr/local/vitasdk/arm-vita-eabi/include/stdlib.h" 2 3

# 1 "/usr/local/vitasdk/arm-vita-eabi/include/alloca.h" 1 3
# 23 "/usr/local/vitasdk/arm-vita-eabi/include/stdlib.h" 2 3






extern "C" {

typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;




typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;




typedef int (*__compar_fn_t) (const void *, const void *);







int __locale_mb_cur_max (void);



void abort (void) __attribute__ ((__noreturn__));
int abs (int);
int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar)



                                ;
void * calloc (size_t __nmemb, size_t __size) __attribute__ ((__nothrow__));
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) __attribute__ ((__nothrow__));
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg;
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void * malloc (size_t __size) __attribute__ ((__nothrow__));
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *, const char *, size_t);
int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *, const char *, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t wcstombs (char *, const wchar_t *, size_t);
size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);


char * mkdtemp (char *);
int mkostemp (char *, int);
int mkostemps (char *, int, int);
int mkstemp (char *);
int mkstemps (char *, int);
char * mktemp (char *) __attribute__ ((__warning__ ("the use of `mktemp' is dangerous; use `mkstemp' instead")));

char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) __attribute__ ((__warning__ ("the use of `mktemp' is dangerous; use `mkstemp' instead")));

void qsort (void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void * realloc (void * __r, size_t __size) __attribute__ ((__nothrow__));

void * reallocf (void * __r, size_t __size);
char * realpath (const char * path, char * resolved_path);

void srand (unsigned __seed);
double strtod (const char * __n, char ** __end_PTR);
double _strtod_r (struct _reent *,const char * __n, char ** __end_PTR);



float strtof (const char * __n, char ** __end_PTR);







long strtol (const char * __n, char ** __end_PTR, int __base);
long _strtol_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
unsigned long strtoul (const char * __n, char ** __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);

int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);
int on_exit (void (*__func)(int, void *),void * __arg);




void _Exit (int __status) __attribute__ ((__noreturn__));


int putenv (char *__string);
int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);
int setenv (const char *__string, const char *__value, int __overwrite);
int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);

char * gcvt (double,int,char *);
char * gcvtf (float,int,char *);
char * fcvt (double,int,int *,int *);
char * fcvtf (float,int,int *,int *);
char * ecvt (double,int,int *,int *);
char * ecvtbuf (double, int, int*, int*, char *);
char * fcvtbuf (double, int, int*, int*, char *);
char * ecvtf (float,int,int *,int *);
char * dtoa (double, int, int, int *, int*, char**);

char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);

char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);
int rand_r (unsigned *__seed);

double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);




long long atoll (const char *__nptr);


long long _atoll_r (struct _reent *, const char *__nptr);




long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char * __n, char ** __end_PTR, int __base);


long long _strtoll_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);




unsigned long long strtoull (const char * __n, char ** __end_PTR, int __base);


unsigned long long _strtoull_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);


void cfree (void *);
int unsetenv (const char *__string);
int _unsetenv_r (struct _reent *, const char *__string);
# 246 "/usr/local/vitasdk/arm-vita-eabi/include/stdlib.h" 3
char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) __attribute__ ((__nothrow__));
void * _calloc_r (struct _reent *, size_t, size_t) __attribute__ ((__nothrow__));
void _free_r (struct _reent *, void *) __attribute__ ((__nothrow__));
void * _realloc_r (struct _reent *, void *, size_t) __attribute__ ((__nothrow__));
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);
# 279 "/usr/local/vitasdk/arm-vita-eabi/include/stdlib.h" 3
extern long double strtold (const char *, char **);



}
# 10 "src/main.c" 2
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/string.h" 1 3
# 17 "/usr/local/vitasdk/arm-vita-eabi/include/string.h" 3
# 1 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 1 3 4
# 18 "/usr/local/vitasdk/arm-vita-eabi/include/string.h" 2 3

extern "C" {

void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void * , const void * , size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *, const char *);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *, const char *, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *, const char *, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *, const char *);

size_t strxfrm (char *, const char *, size_t);


char *strtok_r (char *, const char *, char **);


int bcmp (const void *, const void *, size_t);
void bcopy (const void *, void *, size_t);
void bzero (void *, size_t);
int ffs (int);
char *index (const char *, int);


void * memccpy (void * , const void * , int, size_t);





void * memrchr (const void *, int, size_t);




char *rindex (const char *, int);

char *stpcpy (char *, const char *);
char *stpncpy (char *, const char *, size_t);

int strcasecmp (const char *, const char *);






char *strdup (const char *);


char *_strdup_r (struct _reent *, const char *);


char *strndup (const char *, size_t);



char *_strndup_r (struct _reent *, const char *, size_t);
# 106 "/usr/local/vitasdk/arm-vita-eabi/include/string.h" 3
int strerror_r (int, char *, size_t)

             __asm__ ("" "__xpg_strerror_r")

  ;







char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


int strncasecmp (const char *, const char *, size_t);



size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);







char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 182 "/usr/local/vitasdk/arm-vita-eabi/include/string.h" 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/string.h" 1 3
# 183 "/usr/local/vitasdk/arm-vita-eabi/include/string.h" 2 3

}
# 11 "src/main.c" 2
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/time.h" 1 3
# 15 "/usr/local/vitasdk/arm-vita-eabi/include/time.h" 3
# 1 "/usr/local/vitasdk/lib/gcc/arm-vita-eabi/4.9.3/include/stddef.h" 1 3 4
# 16 "/usr/local/vitasdk/arm-vita-eabi/include/time.h" 2 3


# 1 "/usr/local/vitasdk/arm-vita-eabi/include/machine/time.h" 1 3
# 19 "/usr/local/vitasdk/arm-vita-eabi/include/time.h" 2 3
# 28 "/usr/local/vitasdk/arm-vita-eabi/include/time.h" 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/timespec.h" 1 3
# 38 "/usr/local/vitasdk/arm-vita-eabi/include/sys/timespec.h" 3
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_timespec.h" 1 3
# 44 "/usr/local/vitasdk/arm-vita-eabi/include/sys/_timespec.h" 3
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
# 39 "/usr/local/vitasdk/arm-vita-eabi/include/sys/timespec.h" 2 3
# 58 "/usr/local/vitasdk/arm-vita-eabi/include/sys/timespec.h" 3
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};
# 29 "/usr/local/vitasdk/arm-vita-eabi/include/time.h" 2 3

extern "C" {

struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;






};

clock_t clock (void);
double difftime (time_t _time2, time_t _time1);
time_t mktime (struct tm *_timeptr);
time_t time (time_t *_timer);

char *asctime (const struct tm *_tblock);
char *ctime (const time_t *_time);
struct tm *gmtime (const time_t *_timer);
struct tm *localtime (const time_t *_timer);

size_t strftime (char * _s, size_t _maxsize, const char * _fmt, const struct tm * _t)

                                        ;

char *asctime_r (const struct tm *, char *)
                       ;
char *ctime_r (const time_t *, char *);
struct tm *gmtime_r (const time_t *, struct tm *)
                            ;
struct tm *localtime_r (const time_t *, struct tm *)
                            ;

}


extern "C" {



char *strptime (const char *, const char *, struct tm *)

                            ;
void tzset (void);
void _tzset_r (struct _reent *);

typedef struct __tzrule_struct
{
  char ch;
  int m;
  int n;
  int d;
  int s;
  time_t change;
  long offset;
} __tzrule_type;

typedef struct __tzinfo_struct
{
  int __tznorth;
  int __tzyear;
  __tzrule_type __tzrule[2];
} __tzinfo_type;

__tzinfo_type *__gettzinfo (void);
# 130 "/usr/local/vitasdk/arm-vita-eabi/include/time.h" 3
extern long _timezone;
extern int _daylight;
extern char *_tzname[2];
# 141 "/usr/local/vitasdk/arm-vita-eabi/include/time.h" 3
}
# 210 "/usr/local/vitasdk/arm-vita-eabi/include/time.h" 3
extern "C" {
# 288 "/usr/local/vitasdk/arm-vita-eabi/include/time.h" 3
}
# 12 "src/main.c" 2
# 1 "/usr/local/vitasdk/arm-vita-eabi/include/math.h" 1 3





# 1 "/usr/local/vitasdk/arm-vita-eabi/include/machine/ieeefp.h" 1 3
# 7 "/usr/local/vitasdk/arm-vita-eabi/include/math.h" 2 3


extern "C" {




union __dmath
{
  double d;
  __ULong i[2];
};

union __fmath
{
  float f;
  __ULong i[1];
};


union __ldmath
{
  long double ld;
  __ULong i[4];
};
# 108 "/usr/local/vitasdk/arm-vita-eabi/include/math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);
# 155 "/usr/local/vitasdk/arm-vita-eabi/include/math.h" 3
    typedef float float_t;
    typedef double double_t;
# 199 "/usr/local/vitasdk/arm-vita-eabi/include/math.h" 3
extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);
# 259 "/usr/local/vitasdk/arm-vita-eabi/include/math.h" 3
extern int finitel (long double);



extern double infinity (void);
extern double nan (const char *);
extern int finite (double);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);





extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern int finitef (float);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);






extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);




extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);


extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern float nexttowardf (float, long double);
extern double nexttoward (double, long double);
extern long double nexttowardl (long double, long double);
extern long double logbl (long double);
extern long double log2l (long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);

extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
# 475 "/usr/local/vitasdk/arm-vita-eabi/include/math.h" 3
extern double drem (double, double);
extern void sincos (double, double *, double *);
extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);

extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);

extern float dremf (float, float);
extern void sincosf (float, float *, float *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);

extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);



extern double exp10 (double);


extern double pow10 (double);


extern float exp10f (float);


extern float pow10f (float);
# 520 "/usr/local/vitasdk/arm-vita-eabi/include/math.h" 3
extern int *__signgam (void);
# 529 "/usr/local/vitasdk/arm-vita-eabi/include/math.h" 3
struct __exception



{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};


extern int matherr (struct __exception *e);
# 595 "/usr/local/vitasdk/arm-vita-eabi/include/math.h" 3
enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};




extern enum __fdlibm_version __fdlib_version;
# 615 "/usr/local/vitasdk/arm-vita-eabi/include/math.h" 3
}
# 13 "src/main.c" 2


# 1 "/usr/local/vitasdk/arm-vita-eabi/include/vita2d.h" 1 3



# 1 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/gxm.h" 1 3
# 18 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/gxm.h" 3
extern "C" {




enum {
 SCE_GXM_ERROR_UNINITIALIZED = 0x805B0000,
 SCE_GXM_ERROR_ALREADY_INITIALIZED = 0x805B0001,
 SCE_GXM_ERROR_OUT_OF_MEMORY = 0x805B0002,
 SCE_GXM_ERROR_INVALID_VALUE = 0x805B0003,
 SCE_GXM_ERROR_INVALID_POINTER = 0x805B0004,
 SCE_GXM_ERROR_INVALID_ALIGNMENT = 0x805B0005,
 SCE_GXM_ERROR_NOT_WITHIN_SCENE = 0x805B0006,
 SCE_GXM_ERROR_WITHIN_SCENE = 0x805B0007,
 SCE_GXM_ERROR_NULL_PROGRAM = 0x805B0008,
 SCE_GXM_ERROR_UNSUPPORTED = 0x805B0009,
 SCE_GXM_ERROR_PATCHER_INTERNAL = 0x805B000A,
 SCE_GXM_ERROR_RESERVE_FAILED = 0x805B000B,
 SCE_GXM_ERROR_PROGRAM_IN_USE = 0x805B000C,
 SCE_GXM_ERROR_INVALID_INDEX_COUNT = 0x805B000D,
 SCE_GXM_ERROR_INVALID_POLYGON_MODE = 0x805B000E,
 SCE_GXM_ERROR_INVALID_SAMPLER_RESULT_TYPE_PRECISION = 0x805B000F,
 SCE_GXM_ERROR_INVALID_SAMPLER_RESULT_TYPE_COMPONENT_COUNT = 0x805B0010,
 SCE_GXM_ERROR_UNIFORM_BUFFER_NOT_RESERVED = 0x805B0011,
 SCE_GXM_ERROR_INVALID_AUXILIARY_SURFACE = 0x805B0013,
 SCE_GXM_ERROR_INVALID_PRECOMPUTED_DRAW = 0x805B0014,
 SCE_GXM_ERROR_INVALID_PRECOMPUTED_VERTEX_STATE = 0x805B0015,
 SCE_GXM_ERROR_INVALID_PRECOMPUTED_FRAGMENT_STATE = 0x805B0016,
 SCE_GXM_ERROR_DRIVER = 0x805B0017
};

typedef void (SceGxmDisplayQueueCallback)(const void *callbackData);

typedef struct SceGxmInitializeParams {
 unsigned int flags;
 unsigned int displayQueueMaxPendingCount;
 SceGxmDisplayQueueCallback *displayQueueCallback;
 unsigned int displayQueueCallbackDataSize;
 SceSize parameterBufferSize;
} SceGxmInitializeParams;

typedef enum SceGxmMemoryAttribFlags {
 SCE_GXM_MEMORY_ATTRIB_READ = 1,
 SCE_GXM_MEMORY_ATTRIB_WRITE = 2,
 SCE_GXM_MEMORY_ATTRIB_RW = (SCE_GXM_MEMORY_ATTRIB_READ | SCE_GXM_MEMORY_ATTRIB_WRITE)
} SceGxmMemoryAttribFlags;

typedef enum SceGxmAttributeFormat {
 SCE_GXM_ATTRIBUTE_FORMAT_U8,
 SCE_GXM_ATTRIBUTE_FORMAT_S8,
 SCE_GXM_ATTRIBUTE_FORMAT_U16,
 SCE_GXM_ATTRIBUTE_FORMAT_S16,
 SCE_GXM_ATTRIBUTE_FORMAT_U8N,
 SCE_GXM_ATTRIBUTE_FORMAT_S8N,
 SCE_GXM_ATTRIBUTE_FORMAT_U16N,
 SCE_GXM_ATTRIBUTE_FORMAT_S16N,
 SCE_GXM_ATTRIBUTE_FORMAT_F16,
 SCE_GXM_ATTRIBUTE_FORMAT_F32
} SceGxmAttributeFormat;

typedef enum SceGxmDepthStencilFormat {
 SCE_GXM_DEPTH_STENCIL_FORMAT_DF32 = 0x00044000u,
 SCE_GXM_DEPTH_STENCIL_FORMAT_S8 = 0x00022000u,
 SCE_GXM_DEPTH_STENCIL_FORMAT_DF32_S8 = 0x00066000u,
 SCE_GXM_DEPTH_STENCIL_FORMAT_S8D24 = 0x01266000u,
 SCE_GXM_DEPTH_STENCIL_FORMAT_D16 = 0x02444000u
} SceGxmDepthStencilFormat;

typedef enum SceGxmPrimitiveType {
 SCE_GXM_PRIMITIVE_TRIANGLES = 0x00000000u,
 SCE_GXM_PRIMITIVE_LINES = 0x04000000u,
 SCE_GXM_PRIMITIVE_POINTS = 0x08000000u,
 SCE_GXM_PRIMITIVE_TRIANGLE_STRIP = 0x0c000000u,
 SCE_GXM_PRIMITIVE_TRIANGLE_FAN = 0x10000000u,
 SCE_GXM_PRIMITIVE_TRIANGLE_EDGES = 0x14000000u
} SceGxmPrimitiveType;

typedef enum SceGxmEdgeEnableFlags {
 SCE_GXM_EDGE_ENABLE_01 = 0x00000100u,
 SCE_GXM_EDGE_ENABLE_12 = 0x00000200u,
 SCE_GXM_EDGE_ENABLE_20 = 0x00000400u
} SceGxmEdgeEnableFlags;

typedef enum SceGxmRegionClipMode {
 SCE_GXM_REGION_CLIP_NONE = 0x00000000u,
 SCE_GXM_REGION_CLIP_ALL = 0x40000000u,
 SCE_GXM_REGION_CLIP_OUTSIDE = 0x80000000u,
 SCE_GXM_REGION_CLIP_INSIDE = 0xc0000000u
} SceGxmRegionClipMode;

typedef enum SceGxmDepthFunc {
 SCE_GXM_DEPTH_FUNC_NEVER = 0x00000000u,
 SCE_GXM_DEPTH_FUNC_LESS = 0x00400000u,
 SCE_GXM_DEPTH_FUNC_EQUAL = 0x00800000u,
 SCE_GXM_DEPTH_FUNC_LESS_EQUAL = 0x00c00000u,
 SCE_GXM_DEPTH_FUNC_GREATER = 0x01000000u,
 SCE_GXM_DEPTH_FUNC_NOT_EQUAL = 0x01400000u,
 SCE_GXM_DEPTH_FUNC_GREATER_EQUAL = 0x01800000u,
 SCE_GXM_DEPTH_FUNC_ALWAYS = 0x01c00000u
} SceGxmDepthFunc;

typedef enum SceGxmStencilFunc {
 SCE_GXM_STENCIL_FUNC_NEVER = 0x00000000u,
 SCE_GXM_STENCIL_FUNC_LESS = 0x02000000u,
 SCE_GXM_STENCIL_FUNC_EQUAL = 0x04000000u,
 SCE_GXM_STENCIL_FUNC_LESS_EQUAL = 0x06000000u,
 SCE_GXM_STENCIL_FUNC_GREATER = 0x08000000u,
 SCE_GXM_STENCIL_FUNC_NOT_EQUAL = 0x0a000000u,
 SCE_GXM_STENCIL_FUNC_GREATER_EQUAL = 0x0c000000u,
 SCE_GXM_STENCIL_FUNC_ALWAYS = 0x0e000000u
} SceGxmStencilFunc;

typedef enum SceGxmStencilOp {
 SCE_GXM_STENCIL_OP_KEEP = 0x00000000u,
 SCE_GXM_STENCIL_OP_ZERO = 0x00000001u,
 SCE_GXM_STENCIL_OP_REPLACE = 0x00000002u,
 SCE_GXM_STENCIL_OP_INCR = 0x00000003u,
 SCE_GXM_STENCIL_OP_DECR = 0x00000004u,
 SCE_GXM_STENCIL_OP_INVERT = 0x00000005u,
 SCE_GXM_STENCIL_OP_INCR_WRAP = 0x00000006u,
 SCE_GXM_STENCIL_OP_DECR_WRAP = 0x00000007u
} SceGxmStencilOp;

typedef enum SceGxmCullMode {
 SCE_GXM_CULL_NONE = 0x00000000u,
 SCE_GXM_CULL_CW = 0x00000001u,
 SCE_GXM_CULL_CCW = 0x00000002u
} SceGxmCullMode;

typedef enum SceGxmPolygonMode {
 SCE_GXM_POLYGON_MODE_TRIANGLE_FILL = 0x00000000u,
 SCE_GXM_POLYGON_MODE_LINE = 0x00008000u,
 SCE_GXM_POLYGON_MODE_POINT_10UV = 0x00010000u,
 SCE_GXM_POLYGON_MODE_POINT = 0x00018000u,
 SCE_GXM_POLYGON_MODE_POINT_01UV = 0x00020000u,
 SCE_GXM_POLYGON_MODE_TRIANGLE_LINE = 0x00028000u,
 SCE_GXM_POLYGON_MODE_TRIANGLE_POINT = 0x00030000u
} SceGxmPolygonMode;

typedef enum SceGxmColorSwizzle4Mode {
 SCE_GXM_COLOR_SWIZZLE4_ABGR = 0x00000000u,
 SCE_GXM_COLOR_SWIZZLE4_ARGB = 0x00100000u,
 SCE_GXM_COLOR_SWIZZLE4_RGBA = 0x00200000u,
 SCE_GXM_COLOR_SWIZZLE4_BGRA = 0x00300000u
} SceGxmColorSwizzle4Mode;

typedef enum SceGxmColorSwizzle3Mode {
 SCE_GXM_COLOR_SWIZZLE3_BGR = 0x00000000u,
 SCE_GXM_COLOR_SWIZZLE3_RGB = 0x00100000u
} SceGxmColorSwizzle3Mode;

typedef enum SceGxmColorSwizzle2Mode {
 SCE_GXM_COLOR_SWIZZLE2_GR = 0x00000000u,
 SCE_GXM_COLOR_SWIZZLE2_RG = 0x00100000u,
 SCE_GXM_COLOR_SWIZZLE2_RA = 0x00200000u,
 SCE_GXM_COLOR_SWIZZLE2_AR = 0x00300000u
} SceGxmColorSwizzle2Mode;

typedef enum SceGxmColorSwizzle1Mode {
 SCE_GXM_COLOR_SWIZZLE1_R = 0x00000000u,
 SCE_GXM_COLOR_SWIZZLE1_G = 0x00100000u,
 SCE_GXM_COLOR_SWIZZLE1_A = 0x00100000u
} SceGxmColorSwizzle1Mode;

typedef enum SceGxmColorBaseFormat {
 SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8 = 0x00000000,
 SCE_GXM_COLOR_BASE_FORMAT_U8U8U8 = 0x10000000,
 SCE_GXM_COLOR_BASE_FORMAT_U5U6U5 = 0x30000000,
 SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5 = 0x40000000,
 SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4 = 0x50000000,
 SCE_GXM_COLOR_BASE_FORMAT_U8U3U3U2 = 0x60000000,
 SCE_GXM_COLOR_BASE_FORMAT_F16 = 0xf0000000,
 SCE_GXM_COLOR_BASE_FORMAT_F16F16 = 0x00800000,
 SCE_GXM_COLOR_BASE_FORMAT_F32 = 0x10800000,
 SCE_GXM_COLOR_BASE_FORMAT_S16 = 0x20800000,
 SCE_GXM_COLOR_BASE_FORMAT_S16S16 = 0x30800000,
 SCE_GXM_COLOR_BASE_FORMAT_U16 = 0x40800000,
 SCE_GXM_COLOR_BASE_FORMAT_U16U16 = 0x50800000,
 SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10 = 0x60800000,
 SCE_GXM_COLOR_BASE_FORMAT_U8 = 0x80800000,
 SCE_GXM_COLOR_BASE_FORMAT_S8 = 0x90800000,
 SCE_GXM_COLOR_BASE_FORMAT_S5S5U6 = 0xa0800000,
 SCE_GXM_COLOR_BASE_FORMAT_U8U8 = 0xb0800000,
 SCE_GXM_COLOR_BASE_FORMAT_S8S8 = 0xc0800000,
 SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8 = 0xd0800000,
 SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8 = 0xe0800000,
 SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16 = 0x01000000,
 SCE_GXM_COLOR_BASE_FORMAT_F32F32 = 0x11000000,
 SCE_GXM_COLOR_BASE_FORMAT_F11F11F10 = 0x21000000,
 SCE_GXM_COLOR_BASE_FORMAT_SE5M9M9M9 = 0x31000000,
 SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10 = 0x41000000
} SceGxmColorBaseFormat;

typedef enum SceGxmColorFormat {


 SCE_GXM_COLOR_FORMAT_U8U8U8U8_ABGR = SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8 | SCE_GXM_COLOR_SWIZZLE4_ABGR,
 SCE_GXM_COLOR_FORMAT_U8U8U8U8_ARGB = SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8 | SCE_GXM_COLOR_SWIZZLE4_ARGB,
 SCE_GXM_COLOR_FORMAT_U8U8U8U8_RGBA = SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8 | SCE_GXM_COLOR_SWIZZLE4_RGBA,
 SCE_GXM_COLOR_FORMAT_U8U8U8U8_BGRA = SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8 | SCE_GXM_COLOR_SWIZZLE4_BGRA,

 SCE_GXM_COLOR_FORMAT_U8U8U8_BGR = SCE_GXM_COLOR_BASE_FORMAT_U8U8U8 | SCE_GXM_COLOR_SWIZZLE3_BGR,
 SCE_GXM_COLOR_FORMAT_U8U8U8_RGB = SCE_GXM_COLOR_BASE_FORMAT_U8U8U8 | SCE_GXM_COLOR_SWIZZLE3_RGB,

 SCE_GXM_COLOR_FORMAT_U5U6U5_BGR = SCE_GXM_COLOR_BASE_FORMAT_U5U6U5 | SCE_GXM_COLOR_SWIZZLE3_BGR,
 SCE_GXM_COLOR_FORMAT_U5U6U5_RGB = SCE_GXM_COLOR_BASE_FORMAT_U5U6U5 | SCE_GXM_COLOR_SWIZZLE3_RGB,

 SCE_GXM_COLOR_FORMAT_U1U5U5U5_ABGR = SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5 | SCE_GXM_COLOR_SWIZZLE4_ABGR,
 SCE_GXM_COLOR_FORMAT_U1U5U5U5_ARGB = SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5 | SCE_GXM_COLOR_SWIZZLE4_ARGB,
 SCE_GXM_COLOR_FORMAT_U5U5U5U1_RGBA = SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5 | SCE_GXM_COLOR_SWIZZLE4_RGBA,
 SCE_GXM_COLOR_FORMAT_U5U5U5U1_BGRA = SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5 | SCE_GXM_COLOR_SWIZZLE4_BGRA,

 SCE_GXM_COLOR_FORMAT_U4U4U4U4_ABGR = SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4 | SCE_GXM_COLOR_SWIZZLE4_ABGR,
 SCE_GXM_COLOR_FORMAT_U4U4U4U4_ARGB = SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4 | SCE_GXM_COLOR_SWIZZLE4_ARGB,
 SCE_GXM_COLOR_FORMAT_U4U4U4U4_RGBA = SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4 | SCE_GXM_COLOR_SWIZZLE4_RGBA,
 SCE_GXM_COLOR_FORMAT_U4U4U4U4_BGRA = SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4 | SCE_GXM_COLOR_SWIZZLE4_BGRA,

 SCE_GXM_COLOR_FORMAT_U8U3U3U2_ARGB = SCE_GXM_COLOR_BASE_FORMAT_U8U3U3U2,

 SCE_GXM_COLOR_FORMAT_F16_R = SCE_GXM_COLOR_BASE_FORMAT_F16 | SCE_GXM_COLOR_SWIZZLE1_R,
 SCE_GXM_COLOR_FORMAT_F16_G = SCE_GXM_COLOR_BASE_FORMAT_F16 | SCE_GXM_COLOR_SWIZZLE1_G,

 SCE_GXM_COLOR_FORMAT_F16F16_GR = SCE_GXM_COLOR_BASE_FORMAT_F16F16 | SCE_GXM_COLOR_SWIZZLE2_GR,
 SCE_GXM_COLOR_FORMAT_F16F16_RG = SCE_GXM_COLOR_BASE_FORMAT_F16F16 | SCE_GXM_COLOR_SWIZZLE2_RG,

 SCE_GXM_COLOR_FORMAT_F32_R = SCE_GXM_COLOR_BASE_FORMAT_F32 | SCE_GXM_COLOR_SWIZZLE1_R,

 SCE_GXM_COLOR_FORMAT_S16_R = SCE_GXM_COLOR_BASE_FORMAT_S16 | SCE_GXM_COLOR_SWIZZLE1_R,
 SCE_GXM_COLOR_FORMAT_S16_G = SCE_GXM_COLOR_BASE_FORMAT_S16 | SCE_GXM_COLOR_SWIZZLE1_G,

 SCE_GXM_COLOR_FORMAT_S16S16_GR = SCE_GXM_COLOR_BASE_FORMAT_S16S16 | SCE_GXM_COLOR_SWIZZLE2_GR,
 SCE_GXM_COLOR_FORMAT_S16S16_RG = SCE_GXM_COLOR_BASE_FORMAT_S16S16 | SCE_GXM_COLOR_SWIZZLE2_RG,

 SCE_GXM_COLOR_FORMAT_U16_R = SCE_GXM_COLOR_BASE_FORMAT_U16 | SCE_GXM_COLOR_SWIZZLE1_R,
 SCE_GXM_COLOR_FORMAT_U16_G = SCE_GXM_COLOR_BASE_FORMAT_U16 | SCE_GXM_COLOR_SWIZZLE1_G,

 SCE_GXM_COLOR_FORMAT_U16U16_GR = SCE_GXM_COLOR_BASE_FORMAT_U16U16 | SCE_GXM_COLOR_SWIZZLE2_GR,
 SCE_GXM_COLOR_FORMAT_U16U16_RG = SCE_GXM_COLOR_BASE_FORMAT_U16U16 | SCE_GXM_COLOR_SWIZZLE2_RG,

 SCE_GXM_COLOR_FORMAT_U2U10U10U10_ABGR = SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10 | SCE_GXM_COLOR_SWIZZLE4_ABGR,
 SCE_GXM_COLOR_FORMAT_U2U10U10U10_ARGB = SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10 | SCE_GXM_COLOR_SWIZZLE4_ARGB,
 SCE_GXM_COLOR_FORMAT_U10U10U10U2_RGBA = SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10 | SCE_GXM_COLOR_SWIZZLE4_RGBA,
 SCE_GXM_COLOR_FORMAT_U10U10U10U2_BGRA = SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10 | SCE_GXM_COLOR_SWIZZLE4_BGRA,

 SCE_GXM_COLOR_FORMAT_U8_R = SCE_GXM_COLOR_BASE_FORMAT_U8 | SCE_GXM_COLOR_SWIZZLE1_R,
 SCE_GXM_COLOR_FORMAT_U8_A = SCE_GXM_COLOR_BASE_FORMAT_U8 | SCE_GXM_COLOR_SWIZZLE1_A,

 SCE_GXM_COLOR_FORMAT_S8_R = SCE_GXM_COLOR_BASE_FORMAT_S8 | SCE_GXM_COLOR_SWIZZLE1_R,
 SCE_GXM_COLOR_FORMAT_S8_A = SCE_GXM_COLOR_BASE_FORMAT_S8 | SCE_GXM_COLOR_SWIZZLE1_A,

 SCE_GXM_COLOR_FORMAT_U6S5S5_BGR = SCE_GXM_COLOR_BASE_FORMAT_S5S5U6 | SCE_GXM_COLOR_SWIZZLE3_BGR,
 SCE_GXM_COLOR_FORMAT_S5S5U6_RGB = SCE_GXM_COLOR_BASE_FORMAT_S5S5U6 | SCE_GXM_COLOR_SWIZZLE3_RGB,

 SCE_GXM_COLOR_FORMAT_U8U8_GR = SCE_GXM_COLOR_BASE_FORMAT_U8U8 | SCE_GXM_COLOR_SWIZZLE2_GR,
 SCE_GXM_COLOR_FORMAT_U8U8_RG = SCE_GXM_COLOR_BASE_FORMAT_U8U8 | SCE_GXM_COLOR_SWIZZLE2_RG,
 SCE_GXM_COLOR_FORMAT_U8U8_RA = SCE_GXM_COLOR_BASE_FORMAT_U8U8 | SCE_GXM_COLOR_SWIZZLE2_RA,
 SCE_GXM_COLOR_FORMAT_U8U8_AR = SCE_GXM_COLOR_BASE_FORMAT_U8U8 | SCE_GXM_COLOR_SWIZZLE2_AR,

 SCE_GXM_COLOR_FORMAT_S8S8_GR = SCE_GXM_COLOR_BASE_FORMAT_S8S8 | SCE_GXM_COLOR_SWIZZLE2_GR,
 SCE_GXM_COLOR_FORMAT_S8S8_RG = SCE_GXM_COLOR_BASE_FORMAT_S8S8 | SCE_GXM_COLOR_SWIZZLE2_RG,
 SCE_GXM_COLOR_FORMAT_S8S8_RA = SCE_GXM_COLOR_BASE_FORMAT_S8S8 | SCE_GXM_COLOR_SWIZZLE2_RA,
 SCE_GXM_COLOR_FORMAT_S8S8_AR = SCE_GXM_COLOR_BASE_FORMAT_S8S8 | SCE_GXM_COLOR_SWIZZLE2_AR,

 SCE_GXM_COLOR_FORMAT_U8S8S8U8_ABGR = SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8 | SCE_GXM_COLOR_SWIZZLE4_ABGR,
 SCE_GXM_COLOR_FORMAT_U8U8S8S8_ARGB = SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8 | SCE_GXM_COLOR_SWIZZLE4_ARGB,
 SCE_GXM_COLOR_FORMAT_U8S8S8U8_RGBA = SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8 | SCE_GXM_COLOR_SWIZZLE4_RGBA,
 SCE_GXM_COLOR_FORMAT_S8S8U8U8_BGRA = SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8 | SCE_GXM_COLOR_SWIZZLE4_BGRA,

 SCE_GXM_COLOR_FORMAT_S8S8S8S8_ABGR = SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8 | SCE_GXM_COLOR_SWIZZLE4_ABGR,
 SCE_GXM_COLOR_FORMAT_S8S8S8S8_ARGB = SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8 | SCE_GXM_COLOR_SWIZZLE4_ARGB,
 SCE_GXM_COLOR_FORMAT_S8S8S8S8_RGBA = SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8 | SCE_GXM_COLOR_SWIZZLE4_RGBA,
 SCE_GXM_COLOR_FORMAT_S8S8S8S8_BGRA = SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8 | SCE_GXM_COLOR_SWIZZLE4_BGRA,

 SCE_GXM_COLOR_FORMAT_F16F16F16F16_ABGR = SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16 | SCE_GXM_COLOR_SWIZZLE4_ABGR,
 SCE_GXM_COLOR_FORMAT_F16F16F16F16_ARGB = SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16 | SCE_GXM_COLOR_SWIZZLE4_ARGB,
 SCE_GXM_COLOR_FORMAT_F16F16F16F16_RGBA = SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16 | SCE_GXM_COLOR_SWIZZLE4_RGBA,
 SCE_GXM_COLOR_FORMAT_F16F16F16F16_BGRA = SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16 | SCE_GXM_COLOR_SWIZZLE4_BGRA,

 SCE_GXM_COLOR_FORMAT_F32F32_GR = SCE_GXM_COLOR_BASE_FORMAT_F32F32 | SCE_GXM_COLOR_SWIZZLE2_GR,
 SCE_GXM_COLOR_FORMAT_F32F32_RG = SCE_GXM_COLOR_BASE_FORMAT_F32F32 | SCE_GXM_COLOR_SWIZZLE2_RG,

 SCE_GXM_COLOR_FORMAT_F10F11F11_BGR = SCE_GXM_COLOR_BASE_FORMAT_F11F11F10 | SCE_GXM_COLOR_SWIZZLE3_BGR,
 SCE_GXM_COLOR_FORMAT_F11F11F10_RGB = SCE_GXM_COLOR_BASE_FORMAT_F11F11F10 | SCE_GXM_COLOR_SWIZZLE3_RGB,

 SCE_GXM_COLOR_FORMAT_SE5M9M9M9_BGR = SCE_GXM_COLOR_BASE_FORMAT_SE5M9M9M9 | SCE_GXM_COLOR_SWIZZLE3_BGR,
 SCE_GXM_COLOR_FORMAT_SE5M9M9M9_RGB = SCE_GXM_COLOR_BASE_FORMAT_SE5M9M9M9 | SCE_GXM_COLOR_SWIZZLE3_RGB,

 SCE_GXM_COLOR_FORMAT_U2F10F10F10_ABGR = SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10 | SCE_GXM_COLOR_SWIZZLE4_ABGR,
 SCE_GXM_COLOR_FORMAT_U2F10F10F10_ARGB = SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10 | SCE_GXM_COLOR_SWIZZLE4_ARGB,
 SCE_GXM_COLOR_FORMAT_F10F10F10U2_RGBA = SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10 | SCE_GXM_COLOR_SWIZZLE4_RGBA,
 SCE_GXM_COLOR_FORMAT_F10F10F10U2_BGRA = SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10 | SCE_GXM_COLOR_SWIZZLE4_BGRA,



 SCE_GXM_COLOR_FORMAT_A8B8G8R8 = SCE_GXM_COLOR_FORMAT_U8U8U8U8_ABGR,
 SCE_GXM_COLOR_FORMAT_A8R8G8B8 = SCE_GXM_COLOR_FORMAT_U8U8U8U8_ARGB,
 SCE_GXM_COLOR_FORMAT_R5G6B5 = SCE_GXM_COLOR_FORMAT_U5U6U5_RGB,
 SCE_GXM_COLOR_FORMAT_A1R5G5B5 = SCE_GXM_COLOR_FORMAT_U1U5U5U5_ARGB,
 SCE_GXM_COLOR_FORMAT_A4R4G4B4 = SCE_GXM_COLOR_FORMAT_U4U4U4U4_ARGB,
 SCE_GXM_COLOR_FORMAT_A8 = SCE_GXM_COLOR_FORMAT_U8_A
} SceGxmColorFormat;

typedef enum SceGxmColorSurfaceType {
 SCE_GXM_COLOR_SURFACE_LINEAR = 0x00000000u,
 SCE_GXM_COLOR_SURFACE_TILED = 0x04000000u,
 SCE_GXM_COLOR_SURFACE_SWIZZLED = 0x08000000u
} SceGxmColorSurfaceType;

typedef enum SceGxmColorSurfaceGammaMode {
 SCE_GXM_COLOR_SURFACE_GAMMA_NONE = 0x00000000u,
 SCE_GXM_COLOR_SURFACE_GAMMA_R = 0x00001000u,
 SCE_GXM_COLOR_SURFACE_GAMMA_GR = 0x00003000u,
 SCE_GXM_COLOR_SURFACE_GAMMA_BGR = 0x00001000u
} SceGxmColorSurfaceGammaMode;

typedef enum SceGxmColorSurfaceDitherMode {
 SCE_GXM_COLOR_SURFACE_DITHER_DISABLED = 0x00000000u,
 SCE_GXM_COLOR_SURFACE_DITHER_ENABLED = 0x00000008u
} SceGxmColorSurfaceDitherMode;

typedef enum SceGxmDepthStencilSurfaceType {
 SCE_GXM_DEPTH_STENCIL_SURFACE_LINEAR = 0x00000000u,
 SCE_GXM_DEPTH_STENCIL_SURFACE_TILED = 0x00011000u
} SceGxmDepthStencilSurfaceType;

typedef enum SceGxmOutputRegisterFormat {
 SCE_GXM_OUTPUT_REGISTER_FORMAT_DECLARED,
 SCE_GXM_OUTPUT_REGISTER_FORMAT_UCHAR4,
 SCE_GXM_OUTPUT_REGISTER_FORMAT_CHAR4,
 SCE_GXM_OUTPUT_REGISTER_FORMAT_USHORT2,
 SCE_GXM_OUTPUT_REGISTER_FORMAT_SHORT2,
 SCE_GXM_OUTPUT_REGISTER_FORMAT_HALF4,
 SCE_GXM_OUTPUT_REGISTER_FORMAT_HALF2,
 SCE_GXM_OUTPUT_REGISTER_FORMAT_FLOAT2,
 SCE_GXM_OUTPUT_REGISTER_FORMAT_FLOAT
} SceGxmOutputRegisterFormat;

typedef enum SceGxmMultisampleMode {
 SCE_GXM_MULTISAMPLE_NONE,
 SCE_GXM_MULTISAMPLE_2X,
 SCE_GXM_MULTISAMPLE_4X
} SceGxmMultisampleMode;

typedef enum SceGxmTextureSwizzle4Mode {
 SCE_GXM_TEXTURE_SWIZZLE4_ABGR = 0x00000000u,
 SCE_GXM_TEXTURE_SWIZZLE4_ARGB = 0x00001000u,
 SCE_GXM_TEXTURE_SWIZZLE4_RGBA = 0x00002000u,
 SCE_GXM_TEXTURE_SWIZZLE4_BGRA = 0x00003000u,
 SCE_GXM_TEXTURE_SWIZZLE4_1BGR = 0x00004000u,
 SCE_GXM_TEXTURE_SWIZZLE4_1RGB = 0x00005000u,
 SCE_GXM_TEXTURE_SWIZZLE4_RGB1 = 0x00006000u,
 SCE_GXM_TEXTURE_SWIZZLE4_BGR1 = 0x00007000u
} SceGxmTextureSwizzle4Mode;

typedef enum SceGxmTextureSwizzle3Mode {
 SCE_GXM_TEXTURE_SWIZZLE3_BGR = 0x00000000u,
 SCE_GXM_TEXTURE_SWIZZLE3_RGB = 0x00001000u
} SceGxmTextureSwizzle3Mode;

typedef enum SceGxmTextureSwizzle2Mode {
 SCE_GXM_TEXTURE_SWIZZLE2_GR = 0x00000000u,
 SCE_GXM_TEXTURE_SWIZZLE2_00GR = 0x00001000u,
 SCE_GXM_TEXTURE_SWIZZLE2_GRRR = 0x00002000u,
 SCE_GXM_TEXTURE_SWIZZLE2_RGGG = 0x00003000u,
 SCE_GXM_TEXTURE_SWIZZLE2_GRGR = 0x00004000u,
 SCE_GXM_TEXTURE_SWIZZLE2_00RG = 0x00005000u
} SceGxmTextureSwizzle2Mode;

typedef enum SceGxmTextureSwizzle2ModeAlt {
 SCE_GXM_TEXTURE_SWIZZLE2_SD = 0x00000000u,
 SCE_GXM_TEXTURE_SWIZZLE2_DS = 0x00001000u
} SceGxmTextureSwizzle2ModeAlt;

typedef enum SceGxmTextureSwizzle1Mode {
 SCE_GXM_TEXTURE_SWIZZLE1_R = 0x00000000u,
 SCE_GXM_TEXTURE_SWIZZLE1_000R = 0x00001000u,
 SCE_GXM_TEXTURE_SWIZZLE1_111R = 0x00002000u,
 SCE_GXM_TEXTURE_SWIZZLE1_RRRR = 0x00003000u,
 SCE_GXM_TEXTURE_SWIZZLE1_0RRR = 0x00004000u,
 SCE_GXM_TEXTURE_SWIZZLE1_1RRR = 0x00005000u,
 SCE_GXM_TEXTURE_SWIZZLE1_R000 = 0x00006000u,
 SCE_GXM_TEXTURE_SWIZZLE1_R111 = 0x00007000u
} SceGxmTextureSwizzle1Mode;

typedef enum SceGxmTextureSwizzleYUV422Mode {
 SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC0 = 0x00000000u,
 SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC0 = 0x00001000u,
 SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC0 = 0x00002000u,
 SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC0 = 0x00003000u,
 SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC1 = 0x00004000u,
 SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC1 = 0x00005000u,
 SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC1 = 0x00006000u,
 SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC1 = 0x00007000u
} SceGxmTextureSwizzleYUV422Mode;

typedef enum SceGxmTextureSwizzleYUV420Mode {
 SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC0 = 0x00000000u,
 SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC0 = 0x00001000u,
 SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC1 = 0x00002000u,
 SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC1 = 0x00003000u
} SceGxmTextureSwizzleYUV420Mode;

typedef enum SceGxmTextureBaseFormat {
 SCE_GXM_TEXTURE_BASE_FORMAT_U8 = 0x00000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_S8 = 0x01000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 = 0x02000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U8U3U3U2 = 0x03000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 = 0x04000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U5U6U5 = 0x05000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_S5S5U6 = 0x06000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 = 0x07000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 = 0x08000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U16 = 0x09000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_S16 = 0x0a000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_F16 = 0x0b000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 = 0x0c000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 = 0x0d000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 = 0x0e000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 = 0x0f000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 = 0x10000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 = 0x11000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_F32 = 0x12000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_F32M = 0x13000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_X8S8S8U8 = 0x14000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_X8U24 = 0x15000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U32 = 0x17000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_S32 = 0x18000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_SE5M9M9M9 = 0x19000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_F11F11F10 = 0x1a000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 = 0x1b000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 = 0x1c000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 = 0x1d000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 = 0x1e000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 = 0x1f000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_PVRT2BPP = 0x80000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_PVRT4BPP = 0x81000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII2BPP = 0x82000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII4BPP = 0x83000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_UBC1 = 0x85000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_UBC2 = 0x86000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_UBC3 = 0x87000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2 = 0x90000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3 = 0x91000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 = 0x92000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_P4 = 0x94000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_P8 = 0x95000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8 = 0x98000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8 = 0x99000000,
 SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 = 0x9a000000
} SceGxmTextureBaseFormat;

typedef enum SceGxmTextureFormat {


 SCE_GXM_TEXTURE_FORMAT_U8_000R = SCE_GXM_TEXTURE_BASE_FORMAT_U8 | SCE_GXM_TEXTURE_SWIZZLE1_000R,
 SCE_GXM_TEXTURE_FORMAT_U8_111R = SCE_GXM_TEXTURE_BASE_FORMAT_U8 | SCE_GXM_TEXTURE_SWIZZLE1_111R,
 SCE_GXM_TEXTURE_FORMAT_U8_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U8 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR,
 SCE_GXM_TEXTURE_FORMAT_U8_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U8 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR,
 SCE_GXM_TEXTURE_FORMAT_U8_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U8 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR,
 SCE_GXM_TEXTURE_FORMAT_U8_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_U8 | SCE_GXM_TEXTURE_SWIZZLE1_R000,
 SCE_GXM_TEXTURE_FORMAT_U8_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_U8 | SCE_GXM_TEXTURE_SWIZZLE1_R111,
 SCE_GXM_TEXTURE_FORMAT_U8_R = SCE_GXM_TEXTURE_BASE_FORMAT_U8 | SCE_GXM_TEXTURE_SWIZZLE1_R,

 SCE_GXM_TEXTURE_FORMAT_S8_000R = SCE_GXM_TEXTURE_BASE_FORMAT_S8 | SCE_GXM_TEXTURE_SWIZZLE1_000R,
 SCE_GXM_TEXTURE_FORMAT_S8_111R = SCE_GXM_TEXTURE_BASE_FORMAT_S8 | SCE_GXM_TEXTURE_SWIZZLE1_111R,
 SCE_GXM_TEXTURE_FORMAT_S8_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_S8 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR,
 SCE_GXM_TEXTURE_FORMAT_S8_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S8 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR,
 SCE_GXM_TEXTURE_FORMAT_S8_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S8 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR,
 SCE_GXM_TEXTURE_FORMAT_S8_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_S8 | SCE_GXM_TEXTURE_SWIZZLE1_R000,
 SCE_GXM_TEXTURE_FORMAT_S8_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_S8 | SCE_GXM_TEXTURE_SWIZZLE1_R111,
 SCE_GXM_TEXTURE_FORMAT_S8_R = SCE_GXM_TEXTURE_BASE_FORMAT_S8 | SCE_GXM_TEXTURE_SWIZZLE1_R,

 SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA,
 SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA,
 SCE_GXM_TEXTURE_FORMAT_X4U4U4U4_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,
 SCE_GXM_TEXTURE_FORMAT_X4U4U4U4_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB,
 SCE_GXM_TEXTURE_FORMAT_U4U4U4X4_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1,
 SCE_GXM_TEXTURE_FORMAT_U4U4U4X4_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1,

 SCE_GXM_TEXTURE_FORMAT_U8U3U3U2_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U8U3U3U2,

 SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_U5U5U5U1_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA,
 SCE_GXM_TEXTURE_FORMAT_U5U5U5U1_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA,
 SCE_GXM_TEXTURE_FORMAT_X1U5U5U5_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,
 SCE_GXM_TEXTURE_FORMAT_X1U5U5U5_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB,
 SCE_GXM_TEXTURE_FORMAT_U5U5U5X1_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1,
 SCE_GXM_TEXTURE_FORMAT_U5U5U5X1_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1,

 SCE_GXM_TEXTURE_FORMAT_U5U6U5_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U5U6U5 | SCE_GXM_TEXTURE_SWIZZLE3_BGR,
 SCE_GXM_TEXTURE_FORMAT_U5U6U5_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U5U6U5 | SCE_GXM_TEXTURE_SWIZZLE3_RGB,

 SCE_GXM_TEXTURE_FORMAT_U6S5S5_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_S5S5U6 | SCE_GXM_TEXTURE_SWIZZLE3_BGR,
 SCE_GXM_TEXTURE_FORMAT_S5S5U6_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_S5S5U6 | SCE_GXM_TEXTURE_SWIZZLE3_RGB,

 SCE_GXM_TEXTURE_FORMAT_U8U8_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 | SCE_GXM_TEXTURE_SWIZZLE2_00GR,
 SCE_GXM_TEXTURE_FORMAT_U8U8_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR,
 SCE_GXM_TEXTURE_FORMAT_U8U8_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG,
 SCE_GXM_TEXTURE_FORMAT_U8U8_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR,
 SCE_GXM_TEXTURE_FORMAT_U8U8_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 | SCE_GXM_TEXTURE_SWIZZLE2_00RG,
 SCE_GXM_TEXTURE_FORMAT_U8U8_GR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 | SCE_GXM_TEXTURE_SWIZZLE2_GR,

 SCE_GXM_TEXTURE_FORMAT_S8S8_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 | SCE_GXM_TEXTURE_SWIZZLE2_00GR,
 SCE_GXM_TEXTURE_FORMAT_S8S8_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR,
 SCE_GXM_TEXTURE_FORMAT_S8S8_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG,
 SCE_GXM_TEXTURE_FORMAT_S8S8_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR,
 SCE_GXM_TEXTURE_FORMAT_S8S8_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 | SCE_GXM_TEXTURE_SWIZZLE2_00RG,
 SCE_GXM_TEXTURE_FORMAT_S8S8_GR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 | SCE_GXM_TEXTURE_SWIZZLE2_GR,

 SCE_GXM_TEXTURE_FORMAT_U16_000R = SCE_GXM_TEXTURE_BASE_FORMAT_U16 | SCE_GXM_TEXTURE_SWIZZLE1_000R,
 SCE_GXM_TEXTURE_FORMAT_U16_111R = SCE_GXM_TEXTURE_BASE_FORMAT_U16 | SCE_GXM_TEXTURE_SWIZZLE1_111R,
 SCE_GXM_TEXTURE_FORMAT_U16_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U16 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR,
 SCE_GXM_TEXTURE_FORMAT_U16_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U16 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR,
 SCE_GXM_TEXTURE_FORMAT_U16_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U16 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR,
 SCE_GXM_TEXTURE_FORMAT_U16_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_U16 | SCE_GXM_TEXTURE_SWIZZLE1_R000,
 SCE_GXM_TEXTURE_FORMAT_U16_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_U16 | SCE_GXM_TEXTURE_SWIZZLE1_R111,
 SCE_GXM_TEXTURE_FORMAT_U16_R = SCE_GXM_TEXTURE_BASE_FORMAT_U16 | SCE_GXM_TEXTURE_SWIZZLE1_R,

 SCE_GXM_TEXTURE_FORMAT_S16_000R = SCE_GXM_TEXTURE_BASE_FORMAT_S16 | SCE_GXM_TEXTURE_SWIZZLE1_000R,
 SCE_GXM_TEXTURE_FORMAT_S16_111R = SCE_GXM_TEXTURE_BASE_FORMAT_S16 | SCE_GXM_TEXTURE_SWIZZLE1_111R,
 SCE_GXM_TEXTURE_FORMAT_S16_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_S16 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR,
 SCE_GXM_TEXTURE_FORMAT_S16_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S16 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR,
 SCE_GXM_TEXTURE_FORMAT_S16_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S16 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR,
 SCE_GXM_TEXTURE_FORMAT_S16_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_S16 | SCE_GXM_TEXTURE_SWIZZLE1_R000,
 SCE_GXM_TEXTURE_FORMAT_S16_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_S16 | SCE_GXM_TEXTURE_SWIZZLE1_R111,
 SCE_GXM_TEXTURE_FORMAT_S16_R = SCE_GXM_TEXTURE_BASE_FORMAT_S16 | SCE_GXM_TEXTURE_SWIZZLE1_R,

 SCE_GXM_TEXTURE_FORMAT_F16_000R = SCE_GXM_TEXTURE_BASE_FORMAT_F16 | SCE_GXM_TEXTURE_SWIZZLE1_000R,
 SCE_GXM_TEXTURE_FORMAT_F16_111R = SCE_GXM_TEXTURE_BASE_FORMAT_F16 | SCE_GXM_TEXTURE_SWIZZLE1_111R,
 SCE_GXM_TEXTURE_FORMAT_F16_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_F16 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR,
 SCE_GXM_TEXTURE_FORMAT_F16_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F16 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR,
 SCE_GXM_TEXTURE_FORMAT_F16_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F16 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR,
 SCE_GXM_TEXTURE_FORMAT_F16_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_F16 | SCE_GXM_TEXTURE_SWIZZLE1_R000,
 SCE_GXM_TEXTURE_FORMAT_F16_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_F16 | SCE_GXM_TEXTURE_SWIZZLE1_R111,
 SCE_GXM_TEXTURE_FORMAT_F16_R = SCE_GXM_TEXTURE_BASE_FORMAT_F16 | SCE_GXM_TEXTURE_SWIZZLE1_R,

 SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA,
 SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA,
 SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,
 SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB,
 SCE_GXM_TEXTURE_FORMAT_U8U8U8X8_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1,
 SCE_GXM_TEXTURE_FORMAT_U8U8U8X8_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1,

 SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA,
 SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA,
 SCE_GXM_TEXTURE_FORMAT_X8S8S8S8_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,
 SCE_GXM_TEXTURE_FORMAT_X8S8S8S8_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB,
 SCE_GXM_TEXTURE_FORMAT_S8S8S8X8_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1,
 SCE_GXM_TEXTURE_FORMAT_S8S8S8X8_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1,

 SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_U10U10U10U2_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA,
 SCE_GXM_TEXTURE_FORMAT_U10U10U10U2_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA,
 SCE_GXM_TEXTURE_FORMAT_X2U10U10U10_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,
 SCE_GXM_TEXTURE_FORMAT_X2U10U10U10_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB,
 SCE_GXM_TEXTURE_FORMAT_U10U10U10X2_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1,
 SCE_GXM_TEXTURE_FORMAT_U10U10U10X2_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1,

 SCE_GXM_TEXTURE_FORMAT_U16U16_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 | SCE_GXM_TEXTURE_SWIZZLE2_00GR,
 SCE_GXM_TEXTURE_FORMAT_U16U16_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR,
 SCE_GXM_TEXTURE_FORMAT_U16U16_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG,
 SCE_GXM_TEXTURE_FORMAT_U16U16_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR,
 SCE_GXM_TEXTURE_FORMAT_U16U16_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 | SCE_GXM_TEXTURE_SWIZZLE2_00RG,
 SCE_GXM_TEXTURE_FORMAT_U16U16_GR = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 | SCE_GXM_TEXTURE_SWIZZLE2_GR,

 SCE_GXM_TEXTURE_FORMAT_S16S16_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 | SCE_GXM_TEXTURE_SWIZZLE2_00GR,
 SCE_GXM_TEXTURE_FORMAT_S16S16_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR,
 SCE_GXM_TEXTURE_FORMAT_S16S16_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG,
 SCE_GXM_TEXTURE_FORMAT_S16S16_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR,
 SCE_GXM_TEXTURE_FORMAT_S16S16_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 | SCE_GXM_TEXTURE_SWIZZLE2_00RG,
 SCE_GXM_TEXTURE_FORMAT_S16S16_GR = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 | SCE_GXM_TEXTURE_SWIZZLE2_GR,

 SCE_GXM_TEXTURE_FORMAT_F16F16_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 | SCE_GXM_TEXTURE_SWIZZLE2_00GR,
 SCE_GXM_TEXTURE_FORMAT_F16F16_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR,
 SCE_GXM_TEXTURE_FORMAT_F16F16_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG,
 SCE_GXM_TEXTURE_FORMAT_F16F16_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR,
 SCE_GXM_TEXTURE_FORMAT_F16F16_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 | SCE_GXM_TEXTURE_SWIZZLE2_00RG,
 SCE_GXM_TEXTURE_FORMAT_F16F16_GR = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 | SCE_GXM_TEXTURE_SWIZZLE2_GR,

 SCE_GXM_TEXTURE_FORMAT_F32_000R = SCE_GXM_TEXTURE_BASE_FORMAT_F32 | SCE_GXM_TEXTURE_SWIZZLE1_000R,
 SCE_GXM_TEXTURE_FORMAT_F32_111R = SCE_GXM_TEXTURE_BASE_FORMAT_F32 | SCE_GXM_TEXTURE_SWIZZLE1_111R,
 SCE_GXM_TEXTURE_FORMAT_F32_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR,
 SCE_GXM_TEXTURE_FORMAT_F32_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR,
 SCE_GXM_TEXTURE_FORMAT_F32_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR,
 SCE_GXM_TEXTURE_FORMAT_F32_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_F32 | SCE_GXM_TEXTURE_SWIZZLE1_R000,
 SCE_GXM_TEXTURE_FORMAT_F32_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_F32 | SCE_GXM_TEXTURE_SWIZZLE1_R111,
 SCE_GXM_TEXTURE_FORMAT_F32_R = SCE_GXM_TEXTURE_BASE_FORMAT_F32 | SCE_GXM_TEXTURE_SWIZZLE1_R,

 SCE_GXM_TEXTURE_FORMAT_F32M_000R = SCE_GXM_TEXTURE_BASE_FORMAT_F32M | SCE_GXM_TEXTURE_SWIZZLE1_000R,
 SCE_GXM_TEXTURE_FORMAT_F32M_111R = SCE_GXM_TEXTURE_BASE_FORMAT_F32M | SCE_GXM_TEXTURE_SWIZZLE1_111R,
 SCE_GXM_TEXTURE_FORMAT_F32M_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32M | SCE_GXM_TEXTURE_SWIZZLE1_RRRR,
 SCE_GXM_TEXTURE_FORMAT_F32M_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32M | SCE_GXM_TEXTURE_SWIZZLE1_0RRR,
 SCE_GXM_TEXTURE_FORMAT_F32M_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32M | SCE_GXM_TEXTURE_SWIZZLE1_1RRR,
 SCE_GXM_TEXTURE_FORMAT_F32M_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_F32M | SCE_GXM_TEXTURE_SWIZZLE1_R000,
 SCE_GXM_TEXTURE_FORMAT_F32M_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_F32M | SCE_GXM_TEXTURE_SWIZZLE1_R111,
 SCE_GXM_TEXTURE_FORMAT_F32M_R = SCE_GXM_TEXTURE_BASE_FORMAT_F32M | SCE_GXM_TEXTURE_SWIZZLE1_R,

 SCE_GXM_TEXTURE_FORMAT_X8S8S8U8_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_X8S8S8U8 | SCE_GXM_TEXTURE_SWIZZLE3_BGR,
 SCE_GXM_TEXTURE_FORMAT_X8U8S8S8_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_X8S8S8U8 | SCE_GXM_TEXTURE_SWIZZLE3_RGB,

 SCE_GXM_TEXTURE_FORMAT_X8U24_SD = SCE_GXM_TEXTURE_BASE_FORMAT_X8U24 | SCE_GXM_TEXTURE_SWIZZLE2_SD,
 SCE_GXM_TEXTURE_FORMAT_U24X8_DS = SCE_GXM_TEXTURE_BASE_FORMAT_X8U24 | SCE_GXM_TEXTURE_SWIZZLE2_DS,

 SCE_GXM_TEXTURE_FORMAT_U32_000R = SCE_GXM_TEXTURE_BASE_FORMAT_U32 | SCE_GXM_TEXTURE_SWIZZLE1_000R,
 SCE_GXM_TEXTURE_FORMAT_U32_111R = SCE_GXM_TEXTURE_BASE_FORMAT_U32 | SCE_GXM_TEXTURE_SWIZZLE1_111R,
 SCE_GXM_TEXTURE_FORMAT_U32_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR,
 SCE_GXM_TEXTURE_FORMAT_U32_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR,
 SCE_GXM_TEXTURE_FORMAT_U32_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR,
 SCE_GXM_TEXTURE_FORMAT_U32_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_U32 | SCE_GXM_TEXTURE_SWIZZLE1_R000,
 SCE_GXM_TEXTURE_FORMAT_U32_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_U32 | SCE_GXM_TEXTURE_SWIZZLE1_R111,
 SCE_GXM_TEXTURE_FORMAT_U32_R = SCE_GXM_TEXTURE_BASE_FORMAT_U32 | SCE_GXM_TEXTURE_SWIZZLE1_R,

 SCE_GXM_TEXTURE_FORMAT_S32_000R = SCE_GXM_TEXTURE_BASE_FORMAT_S32 | SCE_GXM_TEXTURE_SWIZZLE1_000R,
 SCE_GXM_TEXTURE_FORMAT_S32_111R = SCE_GXM_TEXTURE_BASE_FORMAT_S32 | SCE_GXM_TEXTURE_SWIZZLE1_111R,
 SCE_GXM_TEXTURE_FORMAT_S32_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_S32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR,
 SCE_GXM_TEXTURE_FORMAT_S32_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR,
 SCE_GXM_TEXTURE_FORMAT_S32_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR,
 SCE_GXM_TEXTURE_FORMAT_S32_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_S32 | SCE_GXM_TEXTURE_SWIZZLE1_R000,
 SCE_GXM_TEXTURE_FORMAT_S32_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_S32 | SCE_GXM_TEXTURE_SWIZZLE1_R111,
 SCE_GXM_TEXTURE_FORMAT_S32_R = SCE_GXM_TEXTURE_BASE_FORMAT_S32 | SCE_GXM_TEXTURE_SWIZZLE1_R,

 SCE_GXM_TEXTURE_FORMAT_SE5M9M9M9_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_SE5M9M9M9 | SCE_GXM_TEXTURE_SWIZZLE3_BGR,
 SCE_GXM_TEXTURE_FORMAT_SE5M9M9M9_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_SE5M9M9M9 | SCE_GXM_TEXTURE_SWIZZLE3_RGB,

 SCE_GXM_TEXTURE_FORMAT_F10F11F11_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_F11F11F10 | SCE_GXM_TEXTURE_SWIZZLE3_BGR,
 SCE_GXM_TEXTURE_FORMAT_F11F11F10_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_F11F11F10 | SCE_GXM_TEXTURE_SWIZZLE3_RGB,

 SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA,
 SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA,
 SCE_GXM_TEXTURE_FORMAT_X16F16F16F16_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,
 SCE_GXM_TEXTURE_FORMAT_X16F16F16F16_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB,
 SCE_GXM_TEXTURE_FORMAT_F16F16F16X16_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1,
 SCE_GXM_TEXTURE_FORMAT_F16F16F16X16_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1,

 SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA,
 SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA,
 SCE_GXM_TEXTURE_FORMAT_X16U16U16U16_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,
 SCE_GXM_TEXTURE_FORMAT_X16U16U16U16_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB,
 SCE_GXM_TEXTURE_FORMAT_U16U16U16X16_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1,
 SCE_GXM_TEXTURE_FORMAT_U16U16U16X16_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1,

 SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA,
 SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA,
 SCE_GXM_TEXTURE_FORMAT_X16S16S16S16_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,
 SCE_GXM_TEXTURE_FORMAT_X16S16S16S16_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB,
 SCE_GXM_TEXTURE_FORMAT_S16S16S16X16_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1,
 SCE_GXM_TEXTURE_FORMAT_S16S16S16X16_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1,

 SCE_GXM_TEXTURE_FORMAT_F32F32_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 | SCE_GXM_TEXTURE_SWIZZLE2_00GR,
 SCE_GXM_TEXTURE_FORMAT_F32F32_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR,
 SCE_GXM_TEXTURE_FORMAT_F32F32_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG,
 SCE_GXM_TEXTURE_FORMAT_F32F32_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR,
 SCE_GXM_TEXTURE_FORMAT_F32F32_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 | SCE_GXM_TEXTURE_SWIZZLE2_00RG,
 SCE_GXM_TEXTURE_FORMAT_F32F32_GR = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 | SCE_GXM_TEXTURE_SWIZZLE2_GR,

 SCE_GXM_TEXTURE_FORMAT_U32U32_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 | SCE_GXM_TEXTURE_SWIZZLE2_00GR,
 SCE_GXM_TEXTURE_FORMAT_U32U32_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR,
 SCE_GXM_TEXTURE_FORMAT_U32U32_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG,
 SCE_GXM_TEXTURE_FORMAT_U32U32_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR,
 SCE_GXM_TEXTURE_FORMAT_U32U32_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 | SCE_GXM_TEXTURE_SWIZZLE2_00RG,
 SCE_GXM_TEXTURE_FORMAT_U32U32_GR = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 | SCE_GXM_TEXTURE_SWIZZLE2_GR,

 SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRT2BPP | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRT2BPP | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,

 SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRT4BPP | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRT4BPP | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,

 SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII2BPP | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII2BPP | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,

 SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII4BPP | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII4BPP | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,

 SCE_GXM_TEXTURE_FORMAT_UBC1_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_UBC1 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,

 SCE_GXM_TEXTURE_FORMAT_UBC2_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_UBC2 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,

 SCE_GXM_TEXTURE_FORMAT_UBC3_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_UBC3 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,

 SCE_GXM_TEXTURE_FORMAT_YUV420P2_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2 | SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC0,
 SCE_GXM_TEXTURE_FORMAT_YVU420P2_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2 | SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC0,
 SCE_GXM_TEXTURE_FORMAT_YUV420P2_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2 | SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC1,
 SCE_GXM_TEXTURE_FORMAT_YVU420P2_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2 | SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC1,

 SCE_GXM_TEXTURE_FORMAT_YUV420P3_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3 | SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC0,
 SCE_GXM_TEXTURE_FORMAT_YVU420P3_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3 | SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC0,
 SCE_GXM_TEXTURE_FORMAT_YUV420P3_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3 | SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC1,
 SCE_GXM_TEXTURE_FORMAT_YVU420P3_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3 | SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC1,

 SCE_GXM_TEXTURE_FORMAT_YUYV422_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 | SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC0,
 SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 | SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC0,
 SCE_GXM_TEXTURE_FORMAT_UYVY422_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 | SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC0,
 SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 | SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC0,
 SCE_GXM_TEXTURE_FORMAT_YUYV422_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 | SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC1,
 SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 | SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC1,
 SCE_GXM_TEXTURE_FORMAT_UYVY422_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 | SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC1,
 SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 | SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC1,

 SCE_GXM_TEXTURE_FORMAT_P4_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_P4 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_P4_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_P4 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_P4_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_P4 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA,
 SCE_GXM_TEXTURE_FORMAT_P4_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_P4 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA,
 SCE_GXM_TEXTURE_FORMAT_P4_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_P4 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,
 SCE_GXM_TEXTURE_FORMAT_P4_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_P4 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB,
 SCE_GXM_TEXTURE_FORMAT_P4_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_P4 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1,
 SCE_GXM_TEXTURE_FORMAT_P4_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_P4 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1,

 SCE_GXM_TEXTURE_FORMAT_P8_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_P8 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_P8_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_P8 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_P8_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_P8 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA,
 SCE_GXM_TEXTURE_FORMAT_P8_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_P8 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA,
 SCE_GXM_TEXTURE_FORMAT_P8_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_P8 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,
 SCE_GXM_TEXTURE_FORMAT_P8_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_P8 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB,
 SCE_GXM_TEXTURE_FORMAT_P8_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_P8 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1,
 SCE_GXM_TEXTURE_FORMAT_P8_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_P8 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1,

 SCE_GXM_TEXTURE_FORMAT_U8U8U8_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8 | SCE_GXM_TEXTURE_SWIZZLE3_BGR,
 SCE_GXM_TEXTURE_FORMAT_U8U8U8_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8 | SCE_GXM_TEXTURE_SWIZZLE3_RGB,

 SCE_GXM_TEXTURE_FORMAT_S8S8S8_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8 | SCE_GXM_TEXTURE_SWIZZLE3_BGR,
 SCE_GXM_TEXTURE_FORMAT_S8S8S8_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8 | SCE_GXM_TEXTURE_SWIZZLE3_RGB,

 SCE_GXM_TEXTURE_FORMAT_U2F10F10F10_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR,
 SCE_GXM_TEXTURE_FORMAT_U2F10F10F10_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_F10F10F10U2_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA,
 SCE_GXM_TEXTURE_FORMAT_F10F10F10U2_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA,
 SCE_GXM_TEXTURE_FORMAT_X2F10F10F10_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR,
 SCE_GXM_TEXTURE_FORMAT_X2F10F10F10_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB,
 SCE_GXM_TEXTURE_FORMAT_F10F10F10X2_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1,
 SCE_GXM_TEXTURE_FORMAT_F10F10F10X2_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1,



 SCE_GXM_TEXTURE_FORMAT_L8 = SCE_GXM_TEXTURE_FORMAT_U8_1RRR,
 SCE_GXM_TEXTURE_FORMAT_A8 = SCE_GXM_TEXTURE_FORMAT_U8_R000,
 SCE_GXM_TEXTURE_FORMAT_R8 = SCE_GXM_TEXTURE_FORMAT_U8_000R,
 SCE_GXM_TEXTURE_FORMAT_A4R4G4B4 = SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ARGB,
 SCE_GXM_TEXTURE_FORMAT_A1R5G5B5 = SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ARGB,
 SCE_GXM_TEXTURE_FORMAT_R5G6B5 = SCE_GXM_TEXTURE_FORMAT_U5U6U5_RGB,
 SCE_GXM_TEXTURE_FORMAT_A8L8 = SCE_GXM_TEXTURE_FORMAT_U8U8_GRRR,
 SCE_GXM_TEXTURE_FORMAT_L8A8 = SCE_GXM_TEXTURE_FORMAT_U8U8_RGGG,
 SCE_GXM_TEXTURE_FORMAT_G8R8 = SCE_GXM_TEXTURE_FORMAT_U8U8_00GR,
 SCE_GXM_TEXTURE_FORMAT_L16 = SCE_GXM_TEXTURE_FORMAT_U16_1RRR,
 SCE_GXM_TEXTURE_FORMAT_A16 = SCE_GXM_TEXTURE_FORMAT_U16_R000,
 SCE_GXM_TEXTURE_FORMAT_R16 = SCE_GXM_TEXTURE_FORMAT_U16_000R,
 SCE_GXM_TEXTURE_FORMAT_D16 = SCE_GXM_TEXTURE_FORMAT_U16_R,
 SCE_GXM_TEXTURE_FORMAT_LF16 = SCE_GXM_TEXTURE_FORMAT_F16_1RRR,
 SCE_GXM_TEXTURE_FORMAT_AF16 = SCE_GXM_TEXTURE_FORMAT_F16_R000,
 SCE_GXM_TEXTURE_FORMAT_RF16 = SCE_GXM_TEXTURE_FORMAT_F16_000R,
 SCE_GXM_TEXTURE_FORMAT_A8R8G8B8 = SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ARGB,
 SCE_GXM_TEXTURE_FORMAT_A8B8G8R8 = SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ABGR,
 SCE_GXM_TEXTURE_FORMAT_AF16LF16 = SCE_GXM_TEXTURE_FORMAT_F16F16_GRRR,
 SCE_GXM_TEXTURE_FORMAT_LF16AF16 = SCE_GXM_TEXTURE_FORMAT_F16F16_RGGG,
 SCE_GXM_TEXTURE_FORMAT_GF16RF16 = SCE_GXM_TEXTURE_FORMAT_F16F16_00GR,
 SCE_GXM_TEXTURE_FORMAT_LF32M = SCE_GXM_TEXTURE_FORMAT_F32M_1RRR,
 SCE_GXM_TEXTURE_FORMAT_AF32M = SCE_GXM_TEXTURE_FORMAT_F32M_R000,
 SCE_GXM_TEXTURE_FORMAT_RF32M = SCE_GXM_TEXTURE_FORMAT_F32M_000R,
 SCE_GXM_TEXTURE_FORMAT_DF32M = SCE_GXM_TEXTURE_FORMAT_F32M_R,
 SCE_GXM_TEXTURE_FORMAT_VYUY = SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC0,
 SCE_GXM_TEXTURE_FORMAT_YVYU = SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC0,
 SCE_GXM_TEXTURE_FORMAT_UBC1 = SCE_GXM_TEXTURE_FORMAT_UBC1_ABGR,
 SCE_GXM_TEXTURE_FORMAT_UBC2 = SCE_GXM_TEXTURE_FORMAT_UBC2_ABGR,
 SCE_GXM_TEXTURE_FORMAT_UBC3 = SCE_GXM_TEXTURE_FORMAT_UBC3_ABGR,
 SCE_GXM_TEXTURE_FORMAT_PVRT2BPP = SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_ABGR,
 SCE_GXM_TEXTURE_FORMAT_PVRT4BPP = SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_ABGR,
 SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP = SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_ABGR,
 SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP = SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_ABGR
} SceGxmTextureFormat;

typedef enum SceGxmTextureAnisoMode {
 SCE_GXM_TEXTURE_ANISO_DISABLED = 0x00000000u,
 SCE_GXM_TEXTURE_ANISO_ENABLED = 0x00004000u
} SceGxmTextureAnisoMode;

typedef enum SceGxmTextureType {
 SCE_GXM_TEXTURE_SWIZZLED = 0x00000000u,
 SCE_GXM_TEXTURE_CUBE = 0x40000000u,
 SCE_GXM_TEXTURE_LINEAR = 0x60000000u,
 SCE_GXM_TEXTURE_TILED = 0x80000000u,
 SCE_GXM_TEXTURE_LINEAR_STRIDED = 0xc0000000u
} SceGxmTextureType;

typedef enum SceGxmTextureFilter {
 SCE_GXM_TEXTURE_FILTER_POINT = 0x00000000u,
 SCE_GXM_TEXTURE_FILTER_LINEAR = 0x00000001u,
 SCE_GXM_TEXTURE_FILTER_ANISO_LINEAR = 0x00000002u,
 SCE_GXM_TEXTURE_FILTER_ANISO_POINT = 0x00000003u
} SceGxmTextureFilter;

typedef enum SceGxmTextureMipFilter {
 SCE_GXM_TEXTURE_MIP_FILTER_DISABLED = 0x00000000u,
 SCE_GXM_TEXTURE_MIP_FILTER_ENABLED = 0x00000200u
} SceGxmTextureMipFilter;

typedef enum SceGxmTextureAddrMode {
 SCE_GXM_TEXTURE_ADDR_REPEAT = 0x00000000u,
 SCE_GXM_TEXTURE_ADDR_MIRROR = 0x00000001u,
 SCE_GXM_TEXTURE_ADDR_CLAMP = 0x00000002u,
 SCE_GXM_TEXTURE_ADDR_MIRROR_CLAMP = 0x00000003u,
 SCE_GXM_TEXTURE_ADDR_REPEAT_IGNORE_BORDER = 0x00000004u,
 SCE_GXM_TEXTURE_ADDR_CLAMP_FULL_BORDER = 0x00000005u,
 SCE_GXM_TEXTURE_ADDR_CLAMP_IGNORE_BORDER = 0x00000006u,
 SCE_GXM_TEXTURE_ADDR_CLAMP_HALF_BORDER = 0x00000007u
} SceGxmTextureAddrMode;

typedef enum SceGxmTextureGammaMode {
 SCE_GXM_TEXTURE_GAMMA_NONE = 0x00000000u,
 SCE_GXM_TEXTURE_GAMMA_R = 0x08000000u,
 SCE_GXM_TEXTURE_GAMMA_GR = 0x18000000u,
 SCE_GXM_TEXTURE_GAMMA_BGR = 0x08000000u
} SceGxmTextureGammaMode;

typedef enum SceGxmIndexFormat {
 SCE_GXM_INDEX_FORMAT_U16 = 0x00000000u,
 SCE_GXM_INDEX_FORMAT_U32 = 0x01000000u
} SceGxmIndexFormat;

typedef enum SceGxmIndexSource {
 SCE_GXM_INDEX_SOURCE_INDEX_16BIT = 0x00000000u,
 SCE_GXM_INDEX_SOURCE_INDEX_32BIT = 0x00000001u,
 SCE_GXM_INDEX_SOURCE_INSTANCE_16BIT = 0x00000002u,
 SCE_GXM_INDEX_SOURCE_INSTANCE_32BIT = 0x00000003u
} SceGxmIndexSource;

typedef enum SceGxmFragmentProgramMode {
 SCE_GXM_FRAGMENT_PROGRAM_DISABLED = 0x00200000u,
 SCE_GXM_FRAGMENT_PROGRAM_ENABLED = 0x00000000u
} SceGxmFragmentProgramMode;

typedef enum SceGxmDepthWriteMode {
 SCE_GXM_DEPTH_WRITE_DISABLED = 0x00100000u,
 SCE_GXM_DEPTH_WRITE_ENABLED = 0x00000000u
} SceGxmDepthWriteMode;

typedef enum SceGxmLineFillLastPixelMode {
 SCE_GXM_LINE_FILL_LAST_PIXEL_DISABLED = 0x00000000u,
 SCE_GXM_LINE_FILL_LAST_PIXEL_ENABLED = 0x00080000u
} SceGxmLineFillLastPixelMode;

typedef enum SceGxmTwoSidedMode {
 SCE_GXM_TWO_SIDED_DISABLED = 0x00000000u,
 SCE_GXM_TWO_SIDED_ENABLED = 0x00000800u
} SceGxmTwoSidedMode;

typedef enum SceGxmWClampMode {
 SCE_GXM_WCLAMP_MODE_DISABLED = 0x00000000u,
 SCE_GXM_WCLAMP_MODE_ENABLED = 0x00008000u
} SceGxmWClampMode;

typedef enum SceGxmViewportMode {
 SCE_GXM_VIEWPORT_DISABLED = 0x00010000u,
 SCE_GXM_VIEWPORT_ENABLED = 0x00000000u
} SceGxmViewportMode;

typedef enum SceGxmWBufferMode {
 SCE_GXM_WBUFFER_DISABLED = 0x00000000u,
 SCE_GXM_WBUFFER_ENABLED = 0x00004000u
} SceGxmWBufferMode;

typedef enum SceGxmDepthStencilForceLoadMode {
 SCE_GXM_DEPTH_STENCIL_FORCE_LOAD_DISABLED = 0x00000000u,
 SCE_GXM_DEPTH_STENCIL_FORCE_LOAD_ENABLED = 0x00000002u
} SceGxmDepthStencilForceLoadMode;

typedef enum SceGxmDepthStencilForceStoreMode {
 SCE_GXM_DEPTH_STENCIL_FORCE_STORE_DISABLED = 0x00000000u,
 SCE_GXM_DEPTH_STENCIL_FORCE_STORE_ENABLED = 0x00000004u
} SceGxmDepthStencilForceStoreMode;

typedef enum SceGxmSceneFlags {
 SCE_GXM_SCENE_FRAGMENT_SET_DEPENDENCY = 0x00000001u,
 SCE_GXM_SCENE_VERTEX_WAIT_FOR_DEPENDENCY = 0x00000002u
} SceGxmSceneFlags;

typedef enum SceGxmMidSceneFlags {
 SCE_GXM_MIDSCENE_PRESERVE_DEFAULT_UNIFORM_BUFFERS = 0x00000001u
} SceGxmMidSceneFlags;

typedef enum SceGxmColorSurfaceScaleMode {
 SCE_GXM_COLOR_SURFACE_SCALE_NONE = 0x00000000u,
 SCE_GXM_COLOR_SURFACE_SCALE_MSAA_DOWNSCALE = 0x00000001u
} SceGxmColorSurfaceScaleMode;

typedef enum SceGxmOutputRegisterSize {
 SCE_GXM_OUTPUT_REGISTER_SIZE_32BIT = 0x00000000u,
 SCE_GXM_OUTPUT_REGISTER_SIZE_64BIT = 0x00000001u
} SceGxmOutputRegisterSize;

typedef enum SceGxmVisibilityTestMode {
 SCE_GXM_VISIBILITY_TEST_DISABLED = 0x00000000u,
 SCE_GXM_VISIBILITY_TEST_ENABLED = 0x00004000u
} SceGxmVisibilityTestMode;

typedef enum SceGxmVisibilityTestOp {
 SCE_GXM_VISIBILITY_TEST_OP_INCREMENT = 0x00000000u,
 SCE_GXM_VISIBILITY_TEST_OP_SET = 0x00040000u
} SceGxmVisibilityTestOp;

typedef enum SceGxmBlendFunc {
 SCE_GXM_BLEND_FUNC_NONE,
 SCE_GXM_BLEND_FUNC_ADD,
 SCE_GXM_BLEND_FUNC_SUBTRACT,
 SCE_GXM_BLEND_FUNC_REVERSE_SUBTRACT
} SceGxmBlendFunc;

typedef enum SceGxmBlendFactor {
 SCE_GXM_BLEND_FACTOR_ZERO,
 SCE_GXM_BLEND_FACTOR_ONE,
 SCE_GXM_BLEND_FACTOR_SRC_COLOR,
 SCE_GXM_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
 SCE_GXM_BLEND_FACTOR_SRC_ALPHA,
 SCE_GXM_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
 SCE_GXM_BLEND_FACTOR_DST_COLOR,
 SCE_GXM_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
 SCE_GXM_BLEND_FACTOR_DST_ALPHA,
 SCE_GXM_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
 SCE_GXM_BLEND_FACTOR_SRC_ALPHA_SATURATE,
 SCE_GXM_BLEND_FACTOR_DST_ALPHA_SATURATE
} SceGxmBlendFactor;

typedef enum SceGxmColorMask {
 SCE_GXM_COLOR_MASK_NONE = 0,
 SCE_GXM_COLOR_MASK_A = (1 << 0),
 SCE_GXM_COLOR_MASK_R = (1 << 1),
 SCE_GXM_COLOR_MASK_G = (1 << 2),
 SCE_GXM_COLOR_MASK_B = (1 << 3),
 SCE_GXM_COLOR_MASK_ALL = (SCE_GXM_COLOR_MASK_A | SCE_GXM_COLOR_MASK_B | SCE_GXM_COLOR_MASK_G | SCE_GXM_COLOR_MASK_R)
} SceGxmColorMask;

typedef struct SceGxmBlendInfo {
 SceGxmColorMask colorMask;
 SceGxmBlendFunc colorFunc : 4;
 SceGxmBlendFunc alphaFunc : 4;
 SceGxmBlendFactor colorSrc : 4;
 SceGxmBlendFactor colorDst : 4;
 SceGxmBlendFactor alphaSrc : 4;
 SceGxmBlendFactor alphaDst : 4;
} SceGxmBlendInfo;

typedef struct SceGxmRenderTarget SceGxmRenderTarget;

typedef struct SceGxmSyncObject SceGxmSyncObject;

typedef struct SceGxmVertexAttribute {
 unsigned short streamIndex;
 unsigned short offset;
 SceGxmAttributeFormat format;
 unsigned char componentCount;
 unsigned short regIndex;
} SceGxmVertexAttribute;

typedef struct SceGxmVertexStream {
 unsigned short stride;
 unsigned short indexSource;
} SceGxmVertexStream;

typedef struct SceGxmTexture {
 unsigned int controlWords[4];
} SceGxmTexture;

typedef struct SceGxmColorSurface {
 unsigned int pbeSidebandWord;
 unsigned int pbeEmitWords[6];
 unsigned int outputRegisterSize;
 SceGxmTexture backgroundTex;
} SceGxmColorSurface;

typedef struct SceGxmDepthStencilSurface {
 unsigned int zlsControl;
 void *depthData;
 void *stencilData;
 float backgroundDepth;
 unsigned int backgroundControl;
} SceGxmDepthStencilSurface;


typedef struct SceGxmAuxiliarySurface {
 uint32_t colorFormat;
 uint32_t type;
 uint32_t width;
 uint32_t height;
 uint32_t stride;
 void *data;
} SceGxmAuxiliarySurface;

typedef struct SceGxmNotification {
 volatile unsigned int *address;
 unsigned int value;
} SceGxmNotification;

typedef struct SceGxmValidRegion {
 unsigned int xMin;
 unsigned int yMin;
 unsigned int xMax;
 unsigned int yMax;
} SceGxmValidRegion;

typedef struct SceGxmContext SceGxmContext;

enum {
 SCE_GXM_MINIMUM_CONTEXT_HOST_MEM_SIZE = (2 * 1024),
 SCE_GXM_DEFAULT_PARAMETER_BUFFER_SIZE = (16 * 1024 * 1024),
 SCE_GXM_DEFAULT_VDM_RING_BUFFER_SIZE = (128 * 1024),
 SCE_GXM_DEFAULT_VERTEX_RING_BUFFER_SIZE = (2 * 1024 * 1024),
 SCE_GXM_DEFAULT_FRAGMENT_RING_BUFFER_SIZE = (512 * 1024),
 SCE_GXM_DEFAULT_FRAGMENT_USSE_RING_BUFFER_SIZE = (16 * 1024),
};

typedef struct SceGxmContextParams {
 void *hostMem;
 SceSize hostMemSize;
 void *vdmRingBufferMem;
 SceSize vdmRingBufferMemSize;
 void *vertexRingBufferMem;
 SceSize vertexRingBufferMemSize;
 void *fragmentRingBufferMem;
 SceSize fragmentRingBufferMemSize;
 void *fragmentUsseRingBufferMem;
 SceSize fragmentUsseRingBufferMemSize;
 unsigned int fragmentUsseRingBufferOffset;
} SceGxmContextParams;

typedef struct SceGxmVertexProgram SceGxmVertexProgram;

typedef struct SceGxmFragmentProgram SceGxmFragmentProgram;

enum {
 SCE_GXM_PRECOMPUTED_VERTEX_STATE_WORD_COUNT = 7,
 SCE_GXM_PRECOMPUTED_FRAGMENT_STATE_WORD_COUNT = 9,
 SCE_GXM_PRECOMPUTED_DRAW_WORD_COUNT = 11,
};

typedef struct SceGxmPrecomputedVertexState {
 unsigned int data[SCE_GXM_PRECOMPUTED_VERTEX_STATE_WORD_COUNT];
} SceGxmPrecomputedVertexState;

typedef struct SceGxmPrecomputedFragmentState {
 unsigned int data[SCE_GXM_PRECOMPUTED_FRAGMENT_STATE_WORD_COUNT];
} SceGxmPrecomputedFragmentState;

typedef struct SceGxmPrecomputedDraw {
 unsigned int data[SCE_GXM_PRECOMPUTED_DRAW_WORD_COUNT];
} SceGxmPrecomputedDraw;

enum {
 SCE_GXM_MAX_VERTEX_ATTRIBUTES = 16,
 SCE_GXM_MAX_VERTEX_STREAMS = 4,
 SCE_GXM_MAX_TEXTURE_UNITS = 16,
 SCE_GXM_MAX_UNIFORM_BUFFERS = 8,
 SCE_GXM_MAX_AUXILIARY_SURFACES = 3,
};

enum {
 SCE_GXM_TILE_SHIFTX = 5U,
 SCE_GXM_TILE_SHIFTY = 5U,
 SCE_GXM_TILE_SIZEX = (1U << SCE_GXM_TILE_SHIFTX),
 SCE_GXM_TILE_SIZEY = (1U << SCE_GXM_TILE_SHIFTY),
};

enum {
 SCE_GXM_COLOR_SURFACE_ALIGNMENT = 4U,
 SCE_GXM_TEXTURE_ALIGNMENT = 16U,
 SCE_GXM_DEPTHSTENCIL_SURFACE_ALIGNMENT = 16U,
 SCE_GXM_PALETTE_ALIGNMENT = 64U,
};

typedef struct SceGxmProgram SceGxmProgram;

typedef struct SceGxmProgramParameter SceGxmProgramParameter;

typedef enum SceGxmProgramType {
 SCE_GXM_VERTEX_PROGRAM,
 SCE_GXM_FRAGMENT_PROGRAM
} SceGxmProgramType;

typedef enum SceGxmParameterCategory {
 SCE_GXM_PARAMETER_CATEGORY_ATTRIBUTE,
 SCE_GXM_PARAMETER_CATEGORY_UNIFORM,
 SCE_GXM_PARAMETER_CATEGORY_SAMPLER,
 SCE_GXM_PARAMETER_CATEGORY_AUXILIARY_SURFACE,
 SCE_GXM_PARAMETER_CATEGORY_UNIFORM_BUFFER
} SceGxmParameterCategory;

typedef enum SceGxmParameterType {
 SCE_GXM_PARAMETER_TYPE_F32,
 SCE_GXM_PARAMETER_TYPE_F16,
 SCE_GXM_PARAMETER_TYPE_C10,
 SCE_GXM_PARAMETER_TYPE_U32,
 SCE_GXM_PARAMETER_TYPE_S32,
 SCE_GXM_PARAMETER_TYPE_U16,
 SCE_GXM_PARAMETER_TYPE_S16,
 SCE_GXM_PARAMETER_TYPE_U8,
 SCE_GXM_PARAMETER_TYPE_S8,
 SCE_GXM_PARAMETER_TYPE_AGGREGATE
} SceGxmParameterType;

typedef enum SceGxmParameterSemantic {
 SCE_GXM_PARAMETER_SEMANTIC_NONE,
 SCE_GXM_PARAMETER_SEMANTIC_ATTR,
 SCE_GXM_PARAMETER_SEMANTIC_BCOL,
 SCE_GXM_PARAMETER_SEMANTIC_BINORMAL,
 SCE_GXM_PARAMETER_SEMANTIC_BLENDINDICES,
 SCE_GXM_PARAMETER_SEMANTIC_BLENDWEIGHT,
 SCE_GXM_PARAMETER_SEMANTIC_COLOR,
 SCE_GXM_PARAMETER_SEMANTIC_DIFFUSE,
 SCE_GXM_PARAMETER_SEMANTIC_FOGCOORD,
 SCE_GXM_PARAMETER_SEMANTIC_NORMAL,
 SCE_GXM_PARAMETER_SEMANTIC_POINTSIZE,
 SCE_GXM_PARAMETER_SEMANTIC_POSITION,
 SCE_GXM_PARAMETER_SEMANTIC_SPECULAR,
 SCE_GXM_PARAMETER_SEMANTIC_TANGENT,
 SCE_GXM_PARAMETER_SEMANTIC_TEXCOORD
} SceGxmParameterSemantic;

typedef struct SceGxmShaderPatcher SceGxmShaderPatcher;

typedef struct SceGxmRegisteredProgram SceGxmRegisteredProgram;

typedef SceGxmRegisteredProgram *SceGxmShaderPatcherId;

typedef void *(SceGxmShaderPatcherHostAllocCallback)(void *userData, SceSize size);
typedef void (SceGxmShaderPatcherHostFreeCallback)(void *userData, void *mem);
typedef void *(SceGxmShaderPatcherBufferAllocCallback)(void *userData, SceSize size);
typedef void (SceGxmShaderPatcherBufferFreeCallback)(void *userData, void *mem);
typedef void *(SceGxmShaderPatcherUsseAllocCallback)(void *userData, SceSize size, unsigned int *usseOffset);
typedef void (SceGxmShaderPatcherUsseFreeCallback)(void *userData, void *mem);

typedef struct SceGxmShaderPatcherParams {
 void *userData;
 SceGxmShaderPatcherHostAllocCallback *hostAllocCallback;
 SceGxmShaderPatcherHostFreeCallback *hostFreeCallback;
 SceGxmShaderPatcherBufferAllocCallback *bufferAllocCallback;
 SceGxmShaderPatcherBufferFreeCallback *bufferFreeCallback;
 void *bufferMem;
 SceSize bufferMemSize;
 SceGxmShaderPatcherUsseAllocCallback *vertexUsseAllocCallback;
 SceGxmShaderPatcherUsseFreeCallback *vertexUsseFreeCallback;
 void *vertexUsseMem;
 SceSize vertexUsseMemSize;
 unsigned int vertexUsseOffset;
 SceGxmShaderPatcherUsseAllocCallback *fragmentUsseAllocCallback;
 SceGxmShaderPatcherUsseFreeCallback *fragmentUsseFreeCallback;
 void *fragmentUsseMem;
 SceSize fragmentUsseMemSize;
 unsigned int fragmentUsseOffset;
} SceGxmShaderPatcherParams;

typedef enum SceGxmRenderTargetFlags {
 SCE_GXM_RENDER_TARGET_CUSTOM_MULTISAMPLE_LOCATIONS = (1 << 0),
} SceGxmRenderTargetFlags;

typedef struct SceGxmRenderTargetParams {
 uint32_t flags;
 uint16_t width;
 uint16_t height;
 uint16_t scenesPerFrame;
 uint16_t multisampleMode;
 uint32_t multisampleLocations;
 SceUID driverMemBlock;
} SceGxmRenderTargetParams;



int sceGxmInitialize(const SceGxmInitializeParams *params);
int sceGxmTerminate();

volatile unsigned int *sceGxmGetNotificationRegion();
int sceGxmNotificationWait(const SceGxmNotification *notification);

int sceGxmMapMemory(void *base, SceSize size, SceGxmMemoryAttribFlags attr);
int sceGxmUnmapMemory(void *base);

int sceGxmMapVertexUsseMemory(void *base, SceSize size, unsigned int *offset);
int sceGxmUnmapVertexUsseMemory(void *base);

int sceGxmMapFragmentUsseMemory(void *base, SceSize size, unsigned int *offset);
int sceGxmUnmapFragmentUsseMemory(void *base);

int sceGxmDisplayQueueAddEntry(SceGxmSyncObject *oldBuffer, SceGxmSyncObject *newBuffer, const void *callbackData);
int sceGxmDisplayQueueFinish();

int sceGxmSyncObjectCreate(SceGxmSyncObject **syncObject);
int sceGxmSyncObjectDestroy(SceGxmSyncObject *syncObject);

int sceGxmCreateContext(const SceGxmContextParams *params, SceGxmContext **context);
int sceGxmDestroyContext(SceGxmContext *context);

void sceGxmSetValidationEnable(SceGxmContext *context, SceBool enable);

void sceGxmSetVertexProgram(SceGxmContext *context, const SceGxmVertexProgram *vertexProgram);
void sceGxmSetFragmentProgram(SceGxmContext *context, const SceGxmFragmentProgram *fragmentProgram);

int sceGxmReserveVertexDefaultUniformBuffer(SceGxmContext *context, void **uniformBuffer);
int sceGxmReserveFragmentDefaultUniformBuffer(SceGxmContext *context, void **uniformBuffer);

int sceGxmSetVertexStream(SceGxmContext *context, unsigned int streamIndex, const void *streamData);
int sceGxmSetVertexTexture(SceGxmContext *context, unsigned int textureIndex, const SceGxmTexture *texture);
int sceGxmSetFragmentTexture(SceGxmContext *context, unsigned int textureIndex, const SceGxmTexture *texture);
int sceGxmSetVertexUniformBuffer(SceGxmContext *context, unsigned int bufferIndex, const void *bufferData);
int sceGxmSetFragmentUniformBuffer(SceGxmContext *context, unsigned int bufferIndex, const void *bufferData);
int sceGxmSetAuxiliarySurface(SceGxmContext *context, unsigned int surfaceIndex, const SceGxmAuxiliarySurface *surface);

void sceGxmSetPrecomputedFragmentState(SceGxmContext *context, const SceGxmPrecomputedFragmentState *precomputedState);
void sceGxmSetPrecomputedVertexState(SceGxmContext *context, const SceGxmPrecomputedVertexState *precomputedState);

int sceGxmDrawPrecomputed(SceGxmContext *context, const SceGxmPrecomputedDraw *precomputedDraw);
int sceGxmDraw(SceGxmContext *context, SceGxmPrimitiveType primType, SceGxmIndexFormat indexType, const void *indexData, unsigned int indexCount);
int sceGxmDrawInstanced(SceGxmContext *context, SceGxmPrimitiveType primType, SceGxmIndexFormat indexType, const void *indexData, unsigned int indexCount, unsigned int indexWrap);
int sceGxmSetVisibilityBuffer(SceGxmContext *context, void *bufferBase, unsigned int stridePerCore);

int sceGxmBeginScene(SceGxmContext *context, unsigned int flags, const SceGxmRenderTarget *renderTarget, const SceGxmValidRegion *validRegion, SceGxmSyncObject *vertexSyncObject, SceGxmSyncObject *fragmentSyncObject, const SceGxmColorSurface *colorSurface, const SceGxmDepthStencilSurface *depthStencil);
int sceGxmMidSceneFlush(SceGxmContext *context, unsigned int flags, SceGxmSyncObject *vertexSyncObject, const SceGxmNotification *vertexNotification);
int sceGxmEndScene(SceGxmContext *context, const SceGxmNotification *vertexNotification, const SceGxmNotification *fragmentNotification);

void sceGxmSetFrontDepthFunc(SceGxmContext *context, SceGxmDepthFunc depthFunc);
void sceGxmSetBackDepthFunc(SceGxmContext *context, SceGxmDepthFunc depthFunc);
void sceGxmSetFrontFragmentProgramEnable(SceGxmContext *context, SceGxmFragmentProgramMode enable);
void sceGxmSetBackFragmentProgramEnable(SceGxmContext *context, SceGxmFragmentProgramMode enable);
void sceGxmSetFrontDepthWriteEnable(SceGxmContext *context, SceGxmDepthWriteMode enable);
void sceGxmSetBackDepthWriteEnable(SceGxmContext *context, SceGxmDepthWriteMode enable);
void sceGxmSetFrontLineFillLastPixelEnable(SceGxmContext *context, SceGxmLineFillLastPixelMode enable);
void sceGxmSetBackLineFillLastPixelEnable(SceGxmContext *context, SceGxmLineFillLastPixelMode enable);
void sceGxmSetFrontStencilRef(SceGxmContext *context, unsigned int sref);
void sceGxmSetBackStencilRef(SceGxmContext *context, unsigned int sref);
void sceGxmSetFrontPointLineWidth(SceGxmContext *context, unsigned int width);
void sceGxmSetBackPointLineWidth(SceGxmContext *context, unsigned int width);
void sceGxmSetFrontPolygonMode(SceGxmContext *context, SceGxmPolygonMode mode);
void sceGxmSetBackPolygonMode(SceGxmContext *context, SceGxmPolygonMode mode);
void sceGxmSetFrontStencilFunc(SceGxmContext *context, SceGxmStencilFunc func, SceGxmStencilOp stencilFail, SceGxmStencilOp depthFail, SceGxmStencilOp depthPass, unsigned char compareMask, unsigned char writeMask);
void sceGxmSetBackStencilFunc(SceGxmContext *context, SceGxmStencilFunc func, SceGxmStencilOp stencilFail, SceGxmStencilOp depthFail, SceGxmStencilOp depthPass, unsigned char compareMask, unsigned char writeMask);
void sceGxmSetFrontDepthBias(SceGxmContext *context, int factor, int units);
void sceGxmSetBackDepthBias(SceGxmContext *context, int factor, int units);
void sceGxmSetTwoSidedEnable(SceGxmContext *context, SceGxmTwoSidedMode enable);
void sceGxmSetViewport(SceGxmContext *context, float xOffset, float xScale, float yOffset, float yScale, float zOffset, float zScale);
void sceGxmSetWClampValue(SceGxmContext *context, float clampValue);
void sceGxmSetWClampEnable(SceGxmContext *context, SceGxmWClampMode enable);
void sceGxmSetRegionClip(SceGxmContext *context, SceGxmRegionClipMode mode, unsigned int xMin, unsigned int yMin, unsigned int xMax, unsigned int yMax);
void sceGxmSetCullMode(SceGxmContext *context, SceGxmCullMode mode);
void sceGxmSetViewportEnable(SceGxmContext *context, SceGxmViewportMode enable);
void sceGxmSetWBufferEnable(SceGxmContext *context, SceGxmWBufferMode enable);
void sceGxmSetFrontVisibilityTestIndex(SceGxmContext *context, unsigned int index);
void sceGxmSetBackVisibilityTestIndex(SceGxmContext *context, unsigned int index);
void sceGxmSetFrontVisibilityTestOp(SceGxmContext *context, SceGxmVisibilityTestOp op);
void sceGxmSetBackVisibilityTestOp(SceGxmContext *context, SceGxmVisibilityTestOp op);
void sceGxmSetFrontVisibilityTestEnable(SceGxmContext *context, SceGxmVisibilityTestMode enable);
void sceGxmSetBackVisibilityTestEnable(SceGxmContext *context, SceGxmVisibilityTestMode enable);

void sceGxmFinish(SceGxmContext *context);

int sceGxmPushUserMarker(SceGxmContext *context, const char *tag);
int sceGxmPopUserMarker(SceGxmContext *context);
int sceGxmSetUserMarker(SceGxmContext *context, const char *tag);

int sceGxmPadHeartbeat(const SceGxmColorSurface *displaySurface, SceGxmSyncObject *displaySyncObject);

int sceGxmPadTriggerGpuPaTrace();

int sceGxmColorSurfaceInit(SceGxmColorSurface *surface, SceGxmColorFormat colorFormat, SceGxmColorSurfaceType surfaceType, SceGxmColorSurfaceScaleMode scaleMode, SceGxmOutputRegisterSize outputRegisterSize, unsigned int width, unsigned int height, unsigned int strideInPixels, void *data);
int sceGxmColorSurfaceInitDisabled(SceGxmColorSurface *surface);
SceBool sceGxmColorSurfaceIsEnabled(const SceGxmColorSurface *surface);
void sceGxmColorSurfaceGetClip(const SceGxmColorSurface *surface, unsigned int *xMin, unsigned int *yMin, unsigned int *xMax, unsigned int *yMax);
void sceGxmColorSurfaceSetClip(SceGxmColorSurface *surface, unsigned int xMin, unsigned int yMin, unsigned int xMax, unsigned int yMax);

SceGxmColorSurfaceScaleMode sceGxmColorSurfaceGetScaleMode(const SceGxmColorSurface *surface);
void sceGxmColorSurfaceSetScaleMode(SceGxmColorSurface *surface, SceGxmColorSurfaceScaleMode scaleMode);

void *sceGxmColorSurfaceGetData(const SceGxmColorSurface *surface);
int sceGxmColorSurfaceSetData(SceGxmColorSurface *surface, void *data);

SceGxmColorFormat sceGxmColorSurfaceGetFormat(const SceGxmColorSurface *surface);
int sceGxmColorSurfaceSetFormat(SceGxmColorSurface *surface, SceGxmColorFormat format);
SceGxmColorSurfaceType sceGxmColorSurfaceGetType(const SceGxmColorSurface *surface);
unsigned int sceGxmColorSurfaceGetStrideInPixels(const SceGxmColorSurface *surface);

int sceGxmDepthStencilSurfaceInit(SceGxmDepthStencilSurface *surface, SceGxmDepthStencilFormat depthStencilFormat, SceGxmDepthStencilSurfaceType surfaceType, unsigned int strideInSamples, void *depthData, void *stencilData);
int sceGxmDepthStencilSurfaceInitDisabled(SceGxmDepthStencilSurface *surface);
float sceGxmDepthStencilSurfaceGetBackgroundDepth(const SceGxmDepthStencilSurface *surface);
void sceGxmDepthStencilSurfaceSetBackgroundDepth(SceGxmDepthStencilSurface *surface, float backgroundDepth);
unsigned char sceGxmDepthStencilSurfaceGetBackgroundStencil(const SceGxmDepthStencilSurface *surface);
void sceGxmDepthStencilSurfaceSetBackgroundStencil(SceGxmDepthStencilSurface *surface, unsigned char backgroundStencil);
SceBool sceGxmDepthStencilSurfaceIsEnabled(const SceGxmDepthStencilSurface *surface);
void sceGxmDepthStencilSurfaceSetForceLoadMode(SceGxmDepthStencilSurface *surface, SceGxmDepthStencilForceLoadMode forceLoad);
SceGxmDepthStencilForceLoadMode sceGxmDepthStencilSurfaceGetForceLoadMode(const SceGxmDepthStencilSurface *surface);
void sceGxmDepthStencilSurfaceSetForceStoreMode(SceGxmDepthStencilSurface *surface, SceGxmDepthStencilForceStoreMode forceStore);
SceGxmDepthStencilForceStoreMode sceGxmDepthStencilSurfaceGetForceStoreMode(const SceGxmDepthStencilSurface *surface);

SceGxmColorSurfaceGammaMode sceGxmColorSurfaceGetGammaMode(const SceGxmColorSurface *surface);
int sceGxmColorSurfaceSetGammaMode(SceGxmColorSurface *surface, SceGxmColorSurfaceGammaMode gammaMode);
SceGxmColorSurfaceDitherMode sceGxmColorSurfaceGetDitherMode(const SceGxmColorSurface *surface);
int sceGxmColorSurfaceSetDitherMode(SceGxmColorSurface *surface, SceGxmColorSurfaceDitherMode ditherMode);

SceGxmDepthStencilFormat sceGxmDepthStencilSurfaceGetFormat(const SceGxmDepthStencilSurface *surface);
unsigned int sceGxmDepthStencilSurfaceGetStrideInSamples(const SceGxmDepthStencilSurface *surface);

int sceGxmProgramCheck(const SceGxmProgram *program);
unsigned int sceGxmProgramGetSize(const SceGxmProgram *program);
SceGxmProgramType sceGxmProgramGetType(const SceGxmProgram *program);
SceBool sceGxmProgramIsDiscardUsed(const SceGxmProgram *program);
SceBool sceGxmProgramIsDepthReplaceUsed(const SceGxmProgram *program);
SceBool sceGxmProgramIsSpriteCoordUsed(const SceGxmProgram *program);
unsigned int sceGxmProgramGetDefaultUniformBufferSize(const SceGxmProgram *program);
unsigned int sceGxmProgramGetParameterCount(const SceGxmProgram *program);

const SceGxmProgramParameter *sceGxmProgramGetParameter(const SceGxmProgram *program, unsigned int index);
const SceGxmProgramParameter *sceGxmProgramFindParameterByName(const SceGxmProgram *program, const char *name);
const SceGxmProgramParameter *sceGxmProgramFindParameterBySemantic(const SceGxmProgram *program, SceGxmParameterSemantic semantic, unsigned int index);
unsigned int sceGxmProgramParameterGetIndex(const SceGxmProgram *program, const SceGxmProgramParameter *parameter);
SceGxmParameterCategory sceGxmProgramParameterGetCategory(const SceGxmProgramParameter *parameter);
const char *sceGxmProgramParameterGetName(const SceGxmProgramParameter *parameter);
SceGxmParameterSemantic sceGxmProgramParameterGetSemantic(const SceGxmProgramParameter *parameter);
unsigned int sceGxmProgramParameterGetSemanticIndex(const SceGxmProgramParameter *parameter);
SceGxmParameterType sceGxmProgramParameterGetType(const SceGxmProgramParameter *parameter);
unsigned int sceGxmProgramParameterGetComponentCount(const SceGxmProgramParameter *parameter);
unsigned int sceGxmProgramParameterGetArraySize(const SceGxmProgramParameter *parameter);
unsigned int sceGxmProgramParameterGetResourceIndex(const SceGxmProgramParameter *parameter);
unsigned int sceGxmProgramParameterGetContainerIndex(const SceGxmProgramParameter *parameter);
SceBool sceGxmProgramParameterIsSamplerCube(const SceGxmProgramParameter *parameter);

const SceGxmProgram *sceGxmFragmentProgramGetProgram(const SceGxmFragmentProgram *fragmentProgram);
const SceGxmProgram *sceGxmVertexProgramGetProgram(const SceGxmVertexProgram *vertexProgram);

int sceGxmShaderPatcherCreate(const SceGxmShaderPatcherParams *params, SceGxmShaderPatcher **shaderPatcher);
int sceGxmShaderPatcherSetUserData(SceGxmShaderPatcher *shaderPatcher, void *userData);
void *sceGxmShaderPatcherGetUserData(SceGxmShaderPatcher *shaderPatcher);
int sceGxmShaderPatcherDestroy(SceGxmShaderPatcher *shaderPatcher);
int sceGxmShaderPatcherRegisterProgram(SceGxmShaderPatcher *shaderPatcher, const SceGxmProgram *programHeader, SceGxmShaderPatcherId *programId);
int sceGxmShaderPatcherUnregisterProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmShaderPatcherId programId);
const SceGxmProgram *sceGxmShaderPatcherGetProgramFromId(SceGxmShaderPatcherId programId);
int sceGxmShaderPatcherSetAuxiliarySurface(SceGxmShaderPatcher *shaderPatcher, unsigned int auxSurfaceIndex, const SceGxmAuxiliarySurface *auxSurface);
int sceGxmShaderPatcherCreateVertexProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmShaderPatcherId programId, const SceGxmVertexAttribute *attributes, unsigned int attributeCount, const SceGxmVertexStream *streams, unsigned int streamCount, SceGxmVertexProgram **vertexProgram);
int sceGxmShaderPatcherCreateFragmentProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmShaderPatcherId programId, SceGxmOutputRegisterFormat outputFormat, SceGxmMultisampleMode multisampleMode, const SceGxmBlendInfo *blendInfo, const SceGxmProgram *vertexProgram, SceGxmFragmentProgram **fragmentProgram);
int sceGxmShaderPatcherAddRefVertexProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmVertexProgram *vertexProgram);
int sceGxmShaderPatcherAddRefFragmentProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmFragmentProgram *fragmentProgram);
int sceGxmShaderPatcherReleaseVertexProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmVertexProgram *vertexProgram);
int sceGxmShaderPatcherReleaseFragmentProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmFragmentProgram *fragmentProgram);
unsigned int sceGxmShaderPatcherGetHostMemAllocated(const SceGxmShaderPatcher *shaderPatcher);
unsigned int sceGxmShaderPatcherGetBufferMemAllocated(const SceGxmShaderPatcher *shaderPatcher);
unsigned int sceGxmShaderPatcherGetVertexUsseMemAllocated(const SceGxmShaderPatcher *shaderPatcher);
unsigned int sceGxmShaderPatcherGetFragmentUsseMemAllocated(const SceGxmShaderPatcher *shaderPatcher);

int sceGxmTextureInitSwizzled(SceGxmTexture *texture, const void *data, SceGxmTextureFormat texFormat, unsigned int width, unsigned int height, unsigned int mipCount);
int sceGxmTextureInitLinear(SceGxmTexture *texture, const void *data, SceGxmTextureFormat texFormat, unsigned int width, unsigned int height, unsigned int mipCount);
int sceGxmTextureInitLinearStrided(SceGxmTexture *texture, const void *data, SceGxmTextureFormat texFormat, unsigned int width, unsigned int height, unsigned int byteStride);
int sceGxmTextureInitTiled(SceGxmTexture *texture, const void *data, SceGxmTextureFormat texFormat, unsigned int width, unsigned int height, unsigned int mipCount);
int sceGxmTextureInitCube(SceGxmTexture *texture, const void *data, SceGxmTextureFormat texFormat, unsigned int width, unsigned int height, unsigned int mipCount);

SceGxmTextureType sceGxmTextureGetType(const SceGxmTexture *texture);

int sceGxmTextureSetMinFilter(SceGxmTexture *texture, SceGxmTextureFilter minFilter);
SceGxmTextureFilter sceGxmTextureGetMinFilter(const SceGxmTexture *texture);

int sceGxmTextureSetMagFilter(SceGxmTexture *texture, SceGxmTextureFilter magFilter);
SceGxmTextureFilter sceGxmTextureGetMagFilter(const SceGxmTexture *texture);

int sceGxmTextureSetMipFilter(SceGxmTexture *texture, SceGxmTextureMipFilter mipFilter);
SceGxmTextureMipFilter sceGxmTextureGetMipFilter(const SceGxmTexture *texture);

int sceGxmTextureSetAnisoMode(SceGxmTexture *texture, SceGxmTextureAnisoMode anisoMode);
SceGxmTextureAnisoMode sceGxmTextureGetAnisoMode(const SceGxmTexture *texture);

int sceGxmTextureSetUAddrMode(SceGxmTexture *texture, SceGxmTextureAddrMode addrMode);
SceGxmTextureAddrMode sceGxmTextureGetUAddrMode(const SceGxmTexture *texture);

int sceGxmTextureSetVAddrMode(SceGxmTexture *texture, SceGxmTextureAddrMode addrMode);
SceGxmTextureAddrMode sceGxmTextureGetVAddrMode(const SceGxmTexture *texture);

int sceGxmTextureSetFormat(SceGxmTexture *texture, SceGxmTextureFormat texFormat);
SceGxmTextureFormat sceGxmTextureGetFormat(const SceGxmTexture *texture);

int sceGxmTextureSetLodBias(SceGxmTexture *texture, unsigned int bias);
unsigned int sceGxmTextureGetLodBias(const SceGxmTexture *texture);

int sceGxmTextureSetStride(SceGxmTexture *texture, unsigned int byteStride);
unsigned int sceGxmTextureGetStride(const SceGxmTexture *texture);

int sceGxmTextureSetWidth(SceGxmTexture *texture, unsigned int width);
unsigned int sceGxmTextureGetWidth(const SceGxmTexture *texture);

int sceGxmTextureSetHeight(SceGxmTexture *texture, unsigned int height);
unsigned int sceGxmTextureGetHeight(const SceGxmTexture *texture);

int sceGxmTextureSetData(SceGxmTexture *texture, const void *data);
void *sceGxmTextureGetData(const SceGxmTexture *texture);

int sceGxmTextureSetMipmapCount(SceGxmTexture *texture, unsigned int mipCount);
unsigned int sceGxmTextureGetMipmapCount(const SceGxmTexture *texture);

int sceGxmTextureSetPalette(SceGxmTexture *texture, const void *paletteData);
void *sceGxmTextureGetPalette(const SceGxmTexture *texture);

SceGxmTextureGammaMode sceGxmTextureGetGammaMode(const SceGxmTexture *texture);
int sceGxmTextureSetGammaMode(SceGxmTexture *texture, SceGxmTextureGammaMode gammaMode);

unsigned int sceGxmGetPrecomputedVertexStateSize(const SceGxmVertexProgram *vertexProgram);
int sceGxmPrecomputedVertexStateInit(SceGxmPrecomputedVertexState *precomputedState, const SceGxmVertexProgram *vertexProgram, void *memBlock);
void sceGxmPrecomputedVertexStateSetDefaultUniformBuffer(SceGxmPrecomputedVertexState *precomputedState, void *defaultBuffer);
void *sceGxmPrecomputedVertexStateGetDefaultUniformBuffer(const SceGxmPrecomputedVertexState *precomputedState);
int sceGxmPrecomputedVertexStateSetAllTextures(SceGxmPrecomputedVertexState *precomputedState, const SceGxmTexture *textures);
int sceGxmPrecomputedVertexStateSetTexture(SceGxmPrecomputedVertexState *precomputedState, unsigned int textureIndex, const SceGxmTexture *texture);
int sceGxmPrecomputedVertexStateSetAllUniformBuffers(SceGxmPrecomputedVertexState *precomputedState, const void * const *bufferDataArray);
int sceGxmPrecomputedVertexStateSetUniformBuffer(SceGxmPrecomputedVertexState *precomputedState, unsigned int bufferIndex, const void *bufferData);
unsigned int sceGxmGetPrecomputedFragmentStateSize(const SceGxmFragmentProgram *fragmentProgram);
int sceGxmPrecomputedFragmentStateInit(SceGxmPrecomputedFragmentState *precomputedState, const SceGxmFragmentProgram *fragmentProgram, void *memBlock);
void sceGxmPrecomputedFragmentStateSetDefaultUniformBuffer(SceGxmPrecomputedFragmentState *precomputedState, void *defaultBuffer);
void *sceGxmPrecomputedFragmentStateGetDefaultUniformBuffer(const SceGxmPrecomputedFragmentState *precomputedState);
int sceGxmPrecomputedFragmentStateSetAllTextures(SceGxmPrecomputedFragmentState *precomputedState, const SceGxmTexture *textureArray);
int sceGxmPrecomputedFragmentStateSetTexture(SceGxmPrecomputedFragmentState *precomputedState, unsigned int textureIndex, const SceGxmTexture *texture);
int sceGxmPrecomputedFragmentStateSetAllUniformBuffers(SceGxmPrecomputedFragmentState *precomputedState, const void * const *bufferDataArray);
int sceGxmPrecomputedFragmentStateSetUniformBuffer(SceGxmPrecomputedFragmentState *precomputedState, unsigned int bufferIndex, const void *bufferData);
int sceGxmPrecomputedFragmentStateSetAllAuxiliarySurfaces(SceGxmPrecomputedFragmentState *precomputedState, const SceGxmAuxiliarySurface *auxSurfaceArray);
unsigned int sceGxmGetPrecomputedDrawSize(const SceGxmVertexProgram *vertexProgram);
int sceGxmPrecomputedDrawInit(SceGxmPrecomputedDraw *precomputedDraw, const SceGxmVertexProgram *vertexProgram, void *memBlock);
int sceGxmPrecomputedDrawSetAllVertexStreams(SceGxmPrecomputedDraw *precomputedDraw, const void * const *streamDataArray);
int sceGxmPrecomputedDrawSetVertexStream(SceGxmPrecomputedDraw *precomputedDraw, unsigned int streamIndex, const void *streamData);
void sceGxmPrecomputedDrawSetParams(SceGxmPrecomputedDraw *precomputedDraw, SceGxmPrimitiveType primType, SceGxmIndexFormat indexType, const void *indexData, unsigned int indexCount);
void sceGxmPrecomputedDrawSetParamsInstanced(SceGxmPrecomputedDraw *precomputedDraw, SceGxmPrimitiveType primType, SceGxmIndexFormat indexType, const void *indexData, unsigned int indexCount, unsigned int indexWrap);

int sceGxmGetRenderTargetMemSizes(const SceGxmRenderTargetParams *params, unsigned int *hostMemSize, unsigned int *driverMemSize);
int sceGxmCreateRenderTarget(const SceGxmRenderTargetParams *params, SceGxmRenderTarget **renderTarget);
int sceGxmRenderTargetGetHostMem(const SceGxmRenderTarget *renderTarget, void **hostMem);
int sceGxmRenderTargetGetDriverMemBlock(const SceGxmRenderTarget *renderTarget, SceUID *driverMemBlock);
int sceGxmDestroyRenderTarget(SceGxmRenderTarget *renderTarget);

int sceGxmSetUniformDataF(void *uniformBuffer, const SceGxmProgramParameter *parameter, unsigned int componentOffset, unsigned int componentCount, const float *sourceData);


}
# 5 "/usr/local/vitasdk/arm-vita-eabi/include/vita2d.h" 2 3

# 1 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/sysmem.h" 1 3
# 18 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/sysmem.h" 3
extern "C" {


typedef int SceKernelMemBlockType;

enum {
 SCE_KERNEL_MEMBLOCK_TYPE_USER_RW = 0x0c20d060,
 SCE_KERNEL_MEMBLOCK_TYPE_USER_RW_UNCACHE = 0x0c208060,
 SCE_KERNEL_MEMBLOCK_TYPE_USER_MAIN_PHYCONT_RW = 0x0c80d060,
 SCE_KERNEL_MEMBLOCK_TYPE_USER_MAIN_PHYCONT_NC_RW = 0x0d808060,
 SCE_KERNEL_MEMBLOCK_TYPE_USER_CDRAM_RW = 0x09408060
};

typedef struct SceKernelAllocMemBlockOpt {
 SceSize size;
 SceUInt32 attr;
 SceSize alignment;
 SceUInt32 uidBaseBlock;
 const char *strBaseBlockName;
 int flags;
 int reserved[10];
} SceKernelAllocMemBlockOpt;

enum {
 SCE_KERNEL_MODEL_VITA = 0x10000,
 SCE_KERNEL_MODEL_VITATV = 0x20000
};
# 56 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/sysmem.h" 3
SceUID sceKernelAllocMemBlock(const char *name, SceKernelMemBlockType type, int size, SceKernelAllocMemBlockOpt *optp);
# 65 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/sysmem.h" 3
int sceKernelFreeMemBlock(SceUID uid);
# 75 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/sysmem.h" 3
int sceKernelGetMemBlockBase(SceUID uid, void **basep);

typedef struct SceKernelMemBlockInfo {
 SceSize size;
 void *mappedBase;
 SceSize mappedSize;
 int memoryType;
 SceUInt32 access;
 SceKernelMemBlockType type;
} SceKernelMemBlockInfo;
# 93 "/usr/local/vitasdk/arm-vita-eabi/include/psp2/kernel/sysmem.h" 3
SceUID sceKernelFindMemBlockByAddr(const void *addr, SceSize size);

int sceKernelGetMemBlockInfoByAddr(void *base, SceKernelMemBlockInfo *info);
int sceKernelGetMemBlockInfoByRange(void *base, SceSize size, SceKernelMemBlockInfo *info);

SceUID sceKernelAllocMemBlockForVM(const char *name, SceSize size);
int sceKernelSyncVMDomain(SceUID uid, void *data, SceSize size);
int sceKernelOpenVMDomain(void);
int sceKernelCloseVMDomain(void);

int sceKernelOpenMemBlock(const char *name, int flags);
int sceKernelCloseMemBlock(SceUID uid);






int sceKernelGetModelForCDialog();






int sceKernelGetModel();


}
# 7 "/usr/local/vitasdk/arm-vita-eabi/include/vita2d.h" 2 3


extern "C" {




typedef struct vita2d_clear_vertex {
 float x;
 float y;
} vita2d_clear_vertex;

typedef struct vita2d_color_vertex {
 float x;
 float y;
 float z;
 unsigned int color;
} vita2d_color_vertex;

typedef struct vita2d_texture_vertex {
 float x;
 float y;
 float z;
 float u;
 float v;
} vita2d_texture_vertex;

typedef struct vita2d_texture {
 SceGxmTexture gxm_tex;
 SceUID data_UID;
 SceUID palette_UID;
} vita2d_texture;

typedef struct vita2d_font vita2d_font;
typedef struct vita2d_pgf vita2d_pgf;

int vita2d_init();
int vita2d_init_advanced(unsigned int temp_pool_size);
void vita2d_wait_rendering_done();
int vita2d_fini();

void vita2d_clear_screen();
void vita2d_swap_buffers();

void vita2d_start_drawing();
void vita2d_end_drawing();

int vita2d_common_dialog_update();

void vita2d_set_clear_color(unsigned int color);
void vita2d_set_vblank_wait(int enable);
void *vita2d_get_current_fb();

void vita2d_set_region_clip(SceGxmRegionClipMode mode, unsigned int x_min, unsigned int y_min, unsigned int x_max, unsigned int y_max);

void *vita2d_pool_malloc(unsigned int size);
void *vita2d_pool_memalign(unsigned int size, unsigned int alignment);
unsigned int vita2d_pool_free_space();
void vita2d_pool_reset();

void vita2d_draw_pixel(float x, float y, unsigned int color);
void vita2d_draw_line(float x0, float y0, float x1, float y1, unsigned int color);
void vita2d_draw_rectangle(float x, float y, float w, float h, unsigned int color);
void vita2d_draw_fill_circle(float x, float y, float radius, unsigned int color);

void vita2d_texture_set_alloc_memblock_type(SceKernelMemBlockType type);
SceKernelMemBlockType vita2d_texture_get_alloc_memblock_type();
vita2d_texture *vita2d_create_empty_texture(unsigned int w, unsigned int h);
vita2d_texture *vita2d_create_empty_texture_format(unsigned int w, unsigned int h, SceGxmTextureFormat format);
void vita2d_free_texture(vita2d_texture *texture);

unsigned int vita2d_texture_get_width(const vita2d_texture *texture);
unsigned int vita2d_texture_get_height(const vita2d_texture *texture);
unsigned int vita2d_texture_get_stride(const vita2d_texture *texture);
SceGxmTextureFormat vita2d_texture_get_format(const vita2d_texture *texture);
void *vita2d_texture_get_datap(const vita2d_texture *texture);
void *vita2d_texture_get_palette(const vita2d_texture *texture);
SceGxmTextureFilter vita2d_texture_get_min_filter(const vita2d_texture *texture);
SceGxmTextureFilter vita2d_texture_get_mag_filter(const vita2d_texture *texture);
void vita2d_texture_set_filters(vita2d_texture *texture, SceGxmTextureFilter min_filter, SceGxmTextureFilter mag_filter);

void vita2d_draw_texture(const vita2d_texture *texture, float x, float y);
void vita2d_draw_texture_rotate(const vita2d_texture *texture, float x, float y, float rad);
void vita2d_draw_texture_rotate_hotspot(const vita2d_texture *texture, float x, float y, float rad, float center_x, float center_y);
void vita2d_draw_texture_scale(const vita2d_texture *texture, float x, float y, float x_scale, float y_scale);
void vita2d_draw_texture_part(const vita2d_texture *texture, float x, float y, float tex_x, float tex_y, float tex_w, float tex_h);
void vita2d_draw_texture_part_scale(const vita2d_texture *texture, float x, float y, float tex_x, float tex_y, float tex_w, float tex_h, float x_scale, float y_scale);
void vita2d_draw_texture_scale_rotate_hotspot(const vita2d_texture *texture, float x, float y, float x_scale, float y_scale, float rad, float center_x, float center_y);
void vita2d_draw_texture_scale_rotate(const vita2d_texture *texture, float x, float y, float x_scale, float y_scale, float rad);

void vita2d_draw_texture_tint(const vita2d_texture *texture, float x, float y, unsigned int color);
void vita2d_draw_texture_tint_rotate(const vita2d_texture *texture, float x, float y, float rad, unsigned int color);
void vita2d_draw_texture_tint_rotate_hotspot(const vita2d_texture *texture, float x, float y, float rad, float center_x, float center_y, unsigned int color);
void vita2d_draw_texture_tint_scale(const vita2d_texture *texture, float x, float y, float x_scale, float y_scale, unsigned int color);
void vita2d_draw_texture_tint_part(const vita2d_texture *texture, float x, float y, float tex_x, float tex_y, float tex_w, float tex_h, unsigned int color);
void vita2d_draw_texture_tint_part_scale(const vita2d_texture *texture, float x, float y, float tex_x, float tex_y, float tex_w, float tex_h, float x_scale, float y_scale, unsigned int color);
void vita2d_draw_texture_tint_scale_rotate_hotspot(const vita2d_texture *texture, float x, float y, float x_scale, float y_scale, float rad, float center_x, float center_y, unsigned int color);
void vita2d_draw_texture_tint_scale_rotate(const vita2d_texture *texture, float x, float y, float x_scale, float y_scale, float rad, unsigned int color);

vita2d_texture *vita2d_load_PNG_file(const char *filename);
vita2d_texture *vita2d_load_PNG_buffer(const void *buffer);

vita2d_texture *vita2d_load_JPEG_file(const char *filename);
vita2d_texture *vita2d_load_JPEG_buffer(const void *buffer, unsigned long buffer_size);

vita2d_texture *vita2d_load_BMP_file(const char *filename);
vita2d_texture *vita2d_load_BMP_buffer(const void *buffer);

vita2d_font *vita2d_load_font_file(const char *filename);
vita2d_font *vita2d_load_font_mem(const void *buffer, unsigned int size);
void vita2d_free_font(vita2d_font *font);
int vita2d_font_draw_text(vita2d_font *font, int x, int y, unsigned int color, unsigned int size, const char *text);
int vita2d_font_draw_textf(vita2d_font *font, int x, int y, unsigned int color, unsigned int size, const char *text, ...);
void vita2d_font_text_dimensions(vita2d_font *font, unsigned int size, const char *text, int *width, int *height);
int vita2d_font_text_width(vita2d_font *font, unsigned int size, const char *text);
int vita2d_font_text_height(vita2d_font *font, unsigned int size, const char *text);


vita2d_pgf *vita2d_load_default_pgf();
vita2d_pgf *vita2d_load_custom_pgf(const char *path);
void vita2d_free_pgf(vita2d_pgf *font);
int vita2d_pgf_draw_text(vita2d_pgf *font, int x, int y, unsigned int color, float scale, const char *text);
int vita2d_pgf_draw_textf(vita2d_pgf *font, int x, int y, unsigned int color, float scale, const char *text, ...);
void vita2d_pgf_text_dimensions(vita2d_pgf *font, float scale, const char *text, int *width, int *height);
int vita2d_pgf_text_width(vita2d_pgf *font, float scale, const char *text);
int vita2d_pgf_text_height(vita2d_pgf *font, float scale, const char *text);


}
# 16 "src/main.c" 2
# 35 "src/main.c"
struct Position
{
    float x;
    float y;
};


struct Tile
{
    struct Position position;
    int width;
    int height;
    unsigned int colour;
    int beingTouched;
    int touched;
};

typedef struct Tile Tile_t;
# 61 "src/main.c"
void setUpTouchScreen();
Tile_t createNewTile(int xPos, int yPos, int width, int height, unsigned int colour);
SceTouchData pollTouchedTiles(Tile_t* tileArray, int tileArrayLengths);
void generateTiles(Tile_t tiles[], int numTiles);
void moveTiles(Tile_t tiles[], int tileLength, int rate);
void checkIfTilesOutsideBounds(Tile_t tiles[], int tileLength);
int removeTile(Tile_t tiles[], int tileLength, int indexOfTile);
void drawBorder(Tile_t tile);
void drawTiles(Tile_t tiles[], int tileLength);
void drawText(vita2d_pgf *font, int x, int y,unsigned int color, float scale,const char *text);
# 90 "src/main.c"
int main(int argc, char *argv[])
{
 SceCtrlData pad;
 vita2d_pgf *pgf;

 int boolDebug = 1;
 int tilesMoving = 0;
 int tileMovingRate = 1;

 vita2d_init();
 vita2d_set_clear_color(((((0xFF)&0xFF)<<24) | (((0x40)&0xFF)<<16) | (((0x40)&0xFF)<<8) | (((0x40)&0xFF)<<0)));

 pgf = vita2d_load_default_pgf();

 srand(time(__null));






 int tileArrayLength = 12;
 Tile_t tileArray[16];
 generateTiles(tileArray, tileArrayLength);

 memset(&pad, 0, sizeof(pad));


 SceTouchData touchOld;
 SceTouchData touch;

 while (1)
 {

  sceCtrlPeekBufferPositive(0, &pad, 1);
  if (pad.buttons & SCE_CTRL_START)
   break;


  if (pad.buttons & SCE_CTRL_RTRIGGER)
  {
   boolDebug = !boolDebug;
  }

  if (pad.buttons & SCE_CTRL_LTRIGGER)
  {
   tilesMoving = !tilesMoving;
  }

  if (pad.buttons & SCE_CTRL_DOWN)
  {
   tileMovingRate += 1;
  }

  vita2d_start_drawing();
  vita2d_clear_screen();
  setUpTouchScreen();




  drawTiles(tileArray, tileArrayLength);




  int i, port = SCE_TOUCH_PORT_FRONT;

  sceTouchPeek(port, &touch, 1);

  for (i = 0; i < SCE_TOUCH_MAX_REPORT - 2; i++)
  {
   char strBuffer[50];
   sprintf(strBuffer,"x:%4i, y:%-4i ",touch.report[i].x,touch.report[i].y);
   drawText(pgf, 0, (i+1)*20, ((((255)&0xFF)<<24) | (((6)&0xFF)<<16) | (((186)&0xFF)<<8) | (((0)&0xFF)<<0)) , 1.0f, strBuffer);
  }

  touch = pollTouchedTiles(tileArray, tileArrayLength);







  if (tilesMoving)
   moveTiles(tileArray, tileArrayLength, tileMovingRate);




  if (boolDebug)
  {
   int i;
   for (i = 0;i < tileArrayLength;i++)
   {
    char strBuffer[50];
    sprintf(strBuffer, "Tile #%d is at position: (%0.1f,%0.1f), touched? %d", i, tileArray[i].position.x,tileArray[i].position.y,tileArray[i].touched);
    drawText(pgf, 200, (i+1)*20, ((((255)&0xFF)<<24) | (((6)&0xFF)<<16) | (((186)&0xFF)<<8) | (((0)&0xFF)<<0)) , 1.0f, strBuffer);
   }

  }

  vita2d_end_drawing();
  vita2d_swap_buffers();
 }






 vita2d_fini();
 vita2d_free_pgf(pgf);


 sceKernelExitProcess(0);
 return 0;
}

void setUpTouchScreen()
{

 sceTouchSetSamplingState(SCE_TOUCH_PORT_FRONT, 1);
 sceTouchEnableTouchForce(SCE_TOUCH_PORT_FRONT);
}


SceTouchData pollTouchedTiles(Tile_t* tileArray, int tileArrayLength)
{


 SceTouchData touch;
 sceTouchPeek(SCE_TOUCH_PORT_FRONT, &touch, 1);
 int i,j;
 Tile_t* tilep = tileArray;
 for (i = 0;i < tileArrayLength;i++, tilep++)
 {
  for (j = 0; j < SCE_TOUCH_MAX_REPORT - 2; j++)
  {
   int touchX = touch.report[j].x / 2;
   int touchY = touch.report[j].y / 2;
   if (touchX >= tilep->position.x && touchX <= tilep->position.x + tilep->width)
   {
    if (touchY >= tilep->position.y && touchY <= tilep->position.y + tilep->height)
    {

     tilep->beingTouched = 1;
     tilep->touched = 1;
    }
    else
    {
     tilep->beingTouched = 0;
    }
   }
   else
   {
    tilep->beingTouched = 0;
   }
  }
 }
 return touch;
}

void generateTiles(Tile_t tiles[], int numTiles)
{

 int blackTile = rand() % 5;
 float i;
 for (i = 0.0 ;i < numTiles;i++)
 {
     if ((int)i % 4 == 0)
     {

         int blackTile = rand() % 5;
     }

  float row = floor(i/4.0);
  float x = ((int)i % 4) * ((1.0/4.0) * 960);
  float y = row * ((1.0/3.0) * 544);

  tiles[(int)i] = createNewTile(x,y,240,181,(i==(int)blackTile) ? ((((255)&0xFF)<<24) | (((0)&0xFF)<<16) | (((0)&0xFF)<<8) | (((0)&0xFF)<<0)):((((255)&0xFF)<<24) | (((255)&0xFF)<<16) | (((255)&0xFF)<<8) | (((255)&0xFF)<<0)));
 }




}

void moveTiles(Tile_t tiles[], int tileLength, int rate)
{
 int i;
 for (i = 0; i < tileLength; ++i)
 {
  tiles[i].position.y += rate;
 }
}


void checkIfTilesOutsideBounds(Tile_t tiles[], int tileLength)
{
 int i;
 for (i = 0; i < tileLength; ++i)
 {
  if (tiles[i].position.y > 544)
  {
   removeTile(tiles, tileLength, i);
  }
 }
}


int removeTile(Tile_t tiles[], int tileLength, int indexOfTile)
{
    Tile_t newTiles[16];
    memcpy(newTiles, tiles, 16 * sizeof(Tile_t));
 int i;
 for (i = indexOfTile - 1 ;i < tileLength - 1 ; i++)
 {
          tiles[i] = tiles[i+1];
    }
 return --tileLength;
}

Tile_t createNewTile(int xPos, int yPos, int width, int height, unsigned int colour)
{
 Tile_t tile;
 tile.position.x = xPos;
 tile.position.y = yPos;
 tile.width = width;
 tile.height = height;
 tile.colour = colour;
 tile.beingTouched = 0;
 tile.touched = 0;
 return tile;
}


void drawTiles(Tile_t tiles[], int tileLength)
{
 int i;
 for (i = 0;i < tileLength;i++)
 {

  vita2d_draw_rectangle(tiles[i].position.x, tiles[i].position.y, tiles[i].width, tiles[i].height, tiles[i].colour);
  drawBorder(tiles[i]);
 }
}

void drawBorder(Tile_t tile)
{

 unsigned int colour = (tile.colour==((((255)&0xFF)<<24) | (((255)&0xFF)<<16) | (((255)&0xFF)<<8) | (((255)&0xFF)<<0))) ? ((((255)&0xFF)<<24) | (((0)&0xFF)<<16) | (((0)&0xFF)<<8) | (((0)&0xFF)<<0)):((((255)&0xFF)<<24) | (((255)&0xFF)<<16) | (((255)&0xFF)<<8) | (((255)&0xFF)<<0));
 vita2d_draw_line(tile.position.x, tile.position.y, tile.position.x, tile.position.y + tile.height, colour);
 vita2d_draw_line(tile.position.x, tile.position.y + tile.height, tile.position.x + tile.width, tile.position.y + tile.height, colour);
 vita2d_draw_line(tile.position.x + tile.width, tile.position.y + tile.height, tile.position.x + tile.width, tile.position.y, colour);
 vita2d_draw_line(tile.position.x + tile.width, tile.position.y, tile.position.x, tile.position.y, colour);

}

void drawText(vita2d_pgf *font, int x, int y,unsigned int colour, float scale,const char *text)
{
 vita2d_pgf_draw_text(font, x, y, colour , scale, text);
}
